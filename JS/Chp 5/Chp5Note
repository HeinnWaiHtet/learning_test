Statements
Statements ဆိုတာက ပီးပြည့်စုံတဲ့ စာကြောင်းတခုကိုဆိုလိုတာဖြစ်တယ်။
Expressionက တန်ဖိုးတခုကိုပြန်ပေးပီး Statementကတော့ တခုခုဖြစ်သွားအောင်လုပ်ဆောင်ပေးexecute
လုပ်ပေးတာမျိုးကိုခေါ်တယ်။
ဥပမာအနေနဲ့ဆို functionကို call လုပ်တာမျိုးက statement ဖြစ်တယ်။

assignment, function callတွေကိုကျတော့ expression statementလို့ခေါ်တယ်။
Eg. 
a = 10;
callFunction();

functionကြေညာတတွေ variable ကြေညာတာတွေကျတော့ declaration statementလို့ခေါ်တယ်။
Eg.
let a = 10;
function callFunction() {}

if, while, do while, for, for in, for of, switch, try-catch-finally
တို့ကိုကျတော့ control structure statement လို့ခေါ်တယ်။

5.1 Expression Statements
side effects ရှိတဲ့ expression တွေကို expression statementလို့ခေါ်တယ်။
ဘာတွေပါလဲဆိုရင် unary operator, delete, console.log, Math functionလိုကောင်မျိုးတွေဖြစ်တယ်။

Eg. 
greeting = 'Hello' + name;
i *= 5;
counter++;
delete obj.name;
console.log('Hello World');
Math.pow(2,3);

Compound and Empty Statements
- ဆိုတာက multiple statementတွေကို ပေါင်းပီး block({}) - curly bracket အဖွင့်ပိတ်ထဲမှာ
ပေါင်းရေးတာမျိုးကိုခေါ်တာဖြစ်တည်။

Conditionals Statements
- ဆိုတာက အခြေနေပေါ်မှာ မူတည်ဆုံးဖြတ်ပီး ဘာလုပ်မယ်ဆိုတာမျိုးကို သတ်မှတ်တာမျိုးဖြစ်တယ်။

ဘာတွေပါလဲဆိုရင် if else, else if, switchတို့ပဲဖြစ်တယ်

If statement
 - if statementကိုရေးမယ်ဆိုရင် if (expression) statement ဆိုပီးရေးရတယ်။
 expressionမှာကျတော့ဘာဖြစ်ရမလဲဆိုရင် truthy တန်ဖိုးဖြစ်ရမယ်။
 ေပးထားတဲ့ expressionနဲ့မှန်ရင် if ရဲ့အောက်က statement တွေကိုလုပ်ဆောင်မှာပဲဖြစ်တယ်

if(username == null)
 username = 'HWH';

ဒီမှာဆိုရင် if မှာက statement တခုတည်းပဲရှိတယ်။
အဲ့လိုမှမဟုတ်ပဲ
if(username == null){
    username = 'HWH';
    address = 'SOMEWHERE';
}

condtion မှန်လို့ လုပ်စေချင်တဲ့အကြောင်းအရာများလို့ အဲ့ကောင်တွေအားလုံးကို
တစုတပေါင်းထဲလုပ်စေချင်ရင် multiple statementsတွေကို block ထဲမှာထည့်ပီးတော့ ရေးလို့ရတယ်။

else 
- elseကကျတော့ဘာလဲဆိုရင် ifက expressionက မမှန်ဘူးဆိုရင် အလုပ်လုပ်မဲ့ကောင်ပဲဖြစ်တယ်။
ဥပမာ အနေနဲ့ဆိုရင် အသက်၁၈ပြည့်ပီးရင် vote ပေးလို့ရမယ် မဟုတ်ရင် ပေးလုိ့မရဘူးဆိုတာကို
အောက်ကလိုမျိုးရေးနိုင်တယ်။

let age = 16;
if(age >= 18){
    console.log('You Can Vote')
}else{
    console.log('You are too young to vote');
}

ဒိကုဒ်မှာဆို အသက်က ၁၈ထပ်ငယ်တဲ့အတွက်ကြောင့် if ထဲကexpressionနဲ့မကိုက်တဲ့တွက်
else က တန်ဖိုးထွက်လာမှာဖြစ်တယ်။

if else
- ကကျတော့ တခုထပ်မကသော ဆုံးဖြတ်ချက်ရွေးချယ်မှုတွေကို လုပ်ချင်ရင် သုံးတယ်။
ဥပမာအနေနဲ့ဆို အမှတ်မှာ ၈၀ထပ်ကျော်ရင် ဂုဏ်ထူး ၄၀ ကနေ ၇၉ဆို အောင်တယ် ၄၀အောက်ဆိုကျတယ်
အဲ့လိုမျိုးတခုထပ်ပိုတဲ့ အခြေနေတွေမှာဆို if else ကိုသုံးနိုင်တယ်။
အောက်ကလိုမျိုး ရေးနိုင်တယ်။

let mark = 76;
if(mark >= 80){
    console.log('Distinction');
}else if(mark >= 40){
    console.log('Pass');
}else{
    console.log('Fail');
}

ဒီဥပမာမှာဆိုရင် ပထမဆုံးအခြေနေတွက်ကို if သုံးတာကိုမြင်ရမယ်
ကျန်တဲ့အခြေနေတွေကိုထပ်ဆင့်ကဲစစ်ဖို့ကျတော့ အဲ့အခြေနေကို else ifထဲမှာစစ်ထားတာတွေ့ရမယ်
ပထမ ဂုဏ်ထူးမှတ်ကိုစစ်လိုက်တယ် 
ဂုဏ်ထူးမှတ်မဟုတ်ဘူး အဲ့ကျရင် အောင်လားဆိုတာကိုကျတော့else if ထဲမှာစစ်တယ်
နောက်ဆုံးအခြေနေ အဲ့လိုအောင်တာ ဂုဏ်ထူးပါတာမဟုတ်ဘူးဆိုတဲ့အခြေနေကျတော့
elseဆိုပီးထည့်လိုက်ပီး ကျတယ်ဆိုတာဆိုပီးထုတ်လိုက်တယ်
ယခုလက်ရှိအမှတ်က 76ဖြစ်တဲ့တွက်ကြောင့် အောင်တယ်ဆိုတဲ့ 'Pass' resultရမှာဖြစ်တယ်။

switch statement
- အခြေနေတွေကိုစစ်ခြင်ရင်သုံးတယ်။
if else if နဲ့ဘာကွာလဲဆိုရင် if, else ifမှာ expression မှာ logical operator နဲ့
operation တွေလုပ်လို့ရတယ်
ဒါပေမဲ့ switchမှာကတော့ expressionမှာ type 1ခုကိုပဲလက်ခံပီး  case မှာက အဲ့ expression type
ပေါ်မှာမူတည်ပီး ကိုက်ညီမှုရှိမရှိစစ်တာဖြစ်တယ်။
syntax အနေနဲ့ဆိုရင် အောက်ပါတိုင်းဖြစ်တယ်။
switch(expression) 
{
    statements
}

if မှာဆိုရင် expression မှာ အောက်ပါလိုမျိုးသု့းနိုင်တယ်။
if(true && false && true){
    Statements
}

switch ရဲ့ expressionမှာတော့ type ကိုပဲလက်ခံလို့ရတယ်။
ဥပမာအနေနဲ့ဆို
let currentDay = 2;
switch(currentDay){
    case 0:
        console.log('Monday');
        break;
    case 1:
        console.log('Tuesday');
        break;
    case 2:
        console.log('Wednesday');
        break;
    case 3:
        console.log('Thursday');
        break;
    case 4:
        console.log('Friday');
        break;
    case 5:
        console.log('Saturday')
        break;
    case 7:
        console.log('Sunday');
    default:
        console.log('Something Wrong');
        break;
}

ဒီဥပမာမှာဆိုရင် switchရဲ့ expressionထဲမှာလက်ခံတဲ့ကောင်က number typeဖြစ်ပီး 
case တခုချင်းစီမှာ စစ်ထားတဲ့ကောင်ကလဲ numberဖြစ်ဖို့လိုပါတယ်။
ဟုတ်ပီ အဲ့တော့ caseမှာ number မဟုတ်ပဲ အခြားtypeဆိုရင်ကောမရဘူးလားဆိုတော့ရပါတယ်။
ဒါပေမဲ့ မှန်ကန်တဲ့တန်ဖိုးတော့ရမှာမဟုတ်ပါဘူ ဘာလို့လဲဆိုရင် switch မှာက တန်ဖိုးကိုစစ်ရင် 
strict equality နဲ့စစ်လို့ဖြစ်တယ်။
ပြောချင်တာက အဲ့ကောင်ကို if မှာဆိုရင် မှန်တယ်ထွက်လိမ့်မယ်။အောက်က ဥပမာကိုကြည့်ရအောင်
if(2 == '2'){
    console.log('Wednesday');
}

switch(2){
    case '2':
        console.log('Wednesday');
        break;
}

အထက်ကဥပမာမှာဆိုရင် if နဲ့ရေးထားတဲ့ကောင်က တန်ဖိုးထွက်လာမှာဖြစ်ပီး switchကကောင်ကတော့ တနဖိုးထွက်လာမှာမဟုတ်ပါဘူး
ဒါမို့ switchမှာ default က strict equalityဆိုတာမှတ်ထားသင့်ပါတယ်
နောက်တခုကတော့ break ပါ။ သူက ဘာလုပ်ဖို့ထည့်ပေးရလဲဆိုရင် မှန်ကန်တဲ့ အခြေနေတခုကိုတွေ့ရင်
အောက်က ကျန်တဲ့အခြေနေတွေကိုဆက်မလုပ်ရအောင်လို့ဖြစ်တယ်။
အထက်ကဥပမာမှဦဆို တန်ဖိုးက 2ဖြစ်တဲ့အတွက် case 2က logကိုထုတ်ပီးတာနဲ့ switchကနေ ထွက်သွားမှာပဲဖြစ်ပါတယ်။

ပိုမြင်သာအောင် နောက်ထပ်ဥပမာတခုကိုကြည့်ရအောင်။
Monday to Fridayဆိုရင် အလုပ်လုပ်ရက် မဟုတ်ရင် ပိတ်ရက်ဆိုတာမျိုးကို switch နဲ့ရေးမယ်ဆိုအောက်ကလိုမျိုးရေးလို့ရတယ်။

switch(day){
    case 'Monday':
    case 'Tuesday':
    case 'Wednesday':
    case 'Thursday':
    case 'Friday':
        console.log('GO TO WORK');
        break;
    default:
        console.log('Stay Home');
        break;
}

ဒီမှာဆိုရင် case တွေတခုပီးတုင်းမှာ ဘယ်statment, breakမှ မပါတာကိုတွေ့ရမယ် အဲ့ထဲက တခုခုနဲ့ကိုက်ညီရင်
အောက်က GO TO WORKဆိုတဲ့ logကိုထုတ်မှာပဲ ဖြစ်တယ်။ 
ဟုတ်ပီ အဲ့တော့ အဲ့အခြေနေတွေနဲ့ မကိုက်ညီရင်ကျ ဘာလုပ်မှာလဲ။
အဲ့အခြေနေတွေနဲ့ မကိုက်ညီဘူးဆိုရင် default ဆိုတဲ့ထဲ၀င်လာပီး defaultထဲကကောင်ကို လုပ်ဆောင်မှာဖြစ်ပါတယ်။
ပြောချင်တာက caseမှာ ကိုက်ညီမှုမရှိတာနဲ့ defaultထဲကိုရောက်လာမှာဖြစ်တယ်။
if else က else clauseနဲ့တူပါတယ်။
if မှာ else မပါပဲရေးနိုင်သလို switchမှာလဲ defaultလုပ်စရာမရှိရင် မထည့်ပဲ ရေးသားနိုင်ပါတယ်၊
အောက်ကလိုမျိုးပဲရေးသားနိုင်ပါတယ်။
switch(day){
    case 'Monday':
    case 'Tuesday':
    case 'Wednesday':
    case 'Thursday':
    case 'Friday':
        console.log('GO TO WORK');
        break;
}

if, switchကို ဘာလို့ခေါလဲဆိုရင် selection statementလို့ခေါ်တယ် 
ပေးလိုက်တဲ့ expressionပေါ်မူတည်ပီး ကိုက်ညီတဲ့ ဘယ်အရာကိုလုပ်ဆောင်မယ်ဆိုတာမျိုးဖြစ်တယ်။

Loops
- Loopsဆိုတာက ဘာလဲဆိုရင် ထပ်ကာထပ်ကာလုပ်ဆောင်တာမျိုးကိုခေါ်တယ်။
loopsဆိုကလဲ statementဖြစ်တယ်။ သူ့ထဲမှာဘာတွေပါလဲဆိုရင် while, do while, for, for of, for in
ဆိုတဲ့ အမျိုးစားတွေပါ၀င်တယ်။

For Loop
ဒီကောင်ကိုဘယ်အခြေနေမျိုးမှာသုံးလဲဆိုရင် လုပ်ဆောင်ရမယ့် အကြိမ်အရေတွက်ကို အတိကျသိရင် 
for loopကိုသုံးသင့်တယ်။ပြောချင်တာက ကျွန်တော်တို့က Helloဆိုတဲ့စာသားကို ဆယ်ကြိမ်ထုတ်ချင်တယ်ဆိုပါစို့
console.log('Hello')ဆိုတာကို ဆယ်ကြိမ်ရေးနေမဲ့အစား for loop ကိုသုံးနိုင်တယ်

for(let i = 0; i < 10; i++){
    console.log('Hello');
}

ဒီမှာဆိုလို့ရှိရင်အပိုင်းသုံးပိုင်းပါဝင်တယ်
ပထမတစ်ခုကတော့ initializer, နောက်တစ်ခုက condtion, နောက်ဆုံးတခုက loop counter
တို့ပဲဖြစ်ကြပါတယ်။

ပထမဆုံးအပိုင်းဖြစ်တဲ့ initializer ကတော့ loop counter တန်ဖိုးကိုသတ်မှတ်ပေးတာဖြစ်တယ်
let i = 0

ဒုတိယပိုင်းဖြစ်တဲ့ condtionကတော့ loopရဲ့ body {} ထဲကကောင်ကို execute လုပ်မလုပ်ဆိုတာကို
ဆုံးဖြတ်ပေးဖို့ဖြစ်တယ်။
condtionကမှန်တော့မှ body {}ထဲကကောင်က အလုပ်လုပ်မှာဖြစ်တယ်။

နောက်ဆုံးအပိုင်းကတော့ counter increment ပဲဖြစ်ပါတယ်
သူကဘယ်လိုလုပ်လဲဆိုရင် conditionကကောင်ကို ထိန်းချုပ်ဖို့အတွက်ဖြစ်ပါတယ်
တကယ်လို့ counter incrementမပါခဲ့ရင် infinite loopဖြစ်နေမှာဖြစ်တယ်

တစ်ခုစဉ်းစားကြည့်ရအောင်။ အဲ့အစိတ်ပိုင်းသုံးခုမပါပဲနဲ့ရေးလို့မရဘူးလားဆိုတော့ရတယ်။
တကယ်လို့ အစိတ်ပိုင်းသုံးခုလုံးတာမပါခဲ့ရင်တော့ infinite အဆုံးမရှိတဲ့ loop ဖြစ်နေမှာဖြစ်တယ်။
initializer, loopcounterကိုတော့မပါပဲနဲ့ သပ်သပ်စီခွဲရေးလို့ရတယ်။
ဥပမာ
let i = 0;
for( ; i < 10; ){
    console.log('Hello');
    i++;
}

ဒါဆိုလို့ရှိရင်လဲ result ကတော့အတူတူရမှာ ဖြစ်ပါတယ်။
initializerကို အရင်ကြိုရေးပီးတော့ incrementကို loop body ထဲမှာ ထည့်လိုက်တာပဲဖြစ်တယ်။
ဒါပေမဲ့ recommend ပေးချင်တဲ့နည်းလမ်းကတော့
for(initializer, condtion, increment){
    statements
}
ဆိုတဲ့နည်းလမ်းပဲဖြစ်ပါတယ်။

ခုfor loopကိုသုံးပီးရေးထားတဲ့ကောင်ကိုနောက်တမျိုးသု့းပီးရေးနိုင်ပါသေးတယ်။ အဲ့တာကတော့ while loop ပဲဖြစ်ပါတယ်

while
- ကိုကျတော့ ဘယ်လိုချိန်မျိုးမှာသုံးသင့်လဲဆိုရင် condition ပေါ်မှာမူတည်ပီး loopလုပ်ချင်ရင်သုံးနိုင်တယ်
ဘယ်လိုခေါ်သေးလဲဆိုရင် condition control loopလို့ခေါ်တယ်။
syntax အနေနဲ့ဆို အောက်ပါတိုင်းဖြစ်တယ်။
while (expression) statement
expression မှာက truthy value ဖြစ်ဖို့လိုအပ်တာပြဖြစ်ပါတယ်။
အပေါ်က ဥပမာကိုပဲ ပြန်ရေးမယ်ဆိုရင်
eg.
let i = 0;
while(i < 10){
    console.log('Hello');
    i++;
}

condition မမှန်မချင်း loop bodyက execute လုပ်နေမှာပဲဖြစ်တယ်။
condition controlအတွက် loop counter control or state valueကတော့ 
မှာ ပြောင်းလဲပေးဖို့ မမေ့ဖို့လိုအပ်တယ် မဟုတ်ရင် infinite loop ဖြစ်သွားမှာဖြစ်တယ်။

do/while
နောက်တခုကတော့  do/while loopပဲဖြစ်တယ်။
သူကလဲ while loopလိုပဲ condition control loopပဲဖြစ်တယ်။
ဘာကွာလဲဆိုရင်ကျတော့  do/while က အနည်းဆုံးတကြိမ်တော့ လုပ်နေမှာပဲဖြစ်တယ်။
while မှာကျတော့ အစထဲက condtionမှားရင် တကြိမ်တောင်မှ လုပ်မှာ မဟုတ်ပေမဲ့
do/whileမှာကျတော့ အနည်းဆုံးတကြိမ်တော့ လုပ်မှာဖြစ်တယ်။ 
ဘယ်လိုနေရာမျိုးတွေမှာ သုံးလဲဆိုရင် user login attempတို့ number guessတို့မျိုးမှာဆိုသု့းနိုင်ပါတယ်။
syntax အနေနဲ့ကတော့ အောက်ပါတိုင်းဖြစ်တယ်။
do
statement
while (expression);

သူ့မှာကျတော့ condition expressionက နောက်ဆုံးမှလာတာပဲဖြစ်တယ်။
ဥပမာနေနဲ့ဆို အောက်ကကောင်လေးကို ကြည့်ကြရအောင်။
let num = parseInt(Math.random() * 10 +1);
let userNum;
let attempt = 0;
do
{
    userNum = parseInt(prompt("Enter your guess"+(attempt+1)));
    if(userNum< num)
    {
        console.log('Too small');
    }
    else if(userNum > num)
    {
        console.log('Too large');
    }
    attempt++;
}while(userNum !== num);

console.log('Correct at attempt ',attempt);

ဒီဥပမာမှာဆိုရင် ပထမက random number တလုံးကိုတောင်းပီး user ဆီကနေ number 1လုံးတောင်းပီး
ခန့်မှန်းခိုင်းတာဖြစ်တယ်။ အဲ့မှာ ပထမဆုံးအနည်းဆုံး တကြိမ်တော့ခန့်မှန်းရမှာဖြစ်တဲ့တွက်ကြောင့် do /while
ကိုသု့းတာဖြစ်တယ်။ ပီးတော့ ခန့်မှန်းတိုင်းမှာ ခန့်မှန်းတဲ့ အကြိမ်အရေတွက်ကို  တိုးသွားပီး ခန့်မှန်းလိုက်တာ
မှန်ရင် ထွက်သွားပီး ဘယ်နကြိမ် ခန့်မှန်းခဲ့ရတယ်ဆိုတာကို ထုတ်ပြမှာဖြစ်တဘ်။
တကယ်လို့ မှားရင်တော့ မမှန်မချင်း user input ပြန်တောင်းနေမှာဖြစ်တယ်
အဲ့လိုအခြေနေမျိုးတွက်ဆိုရင်သုံးနိုင်ပါတယ်။

for / of
- ဒီကောင်ကကျတော့ ဘယ်လိုနေရာမျိုးမှာသုံးလဲဆိုရင် Iterator valueတွေကို loop ပတ်ချင်၇င်သုံးတယ်
Iterator valueဆိုတာက array, map, setတို့လိုကောင်မျိုးကိုပြောတာဖြစ်တယ်။
ဒီကောင်ကို ES6(ECMA 2015)မှာမှ သုံးလို့ရမှာဖြစ်တဲ့ အဲ့အရင်ကောင်တွေဆို၇င်တော့ သု့းလို့ရမှာမဟုတ်ပါဘူး။
ဥပမာ အနေနဲ့ဆို အောက်ပါတိုင်းရေးလို့ရတယ်။
let data = [1, 2, 3, 4, 5, 6, 7, 8, 9], sum = 0; 
for(let element of data) {
    sum += element;
}
sum // => 45

data arrayထဲမှာရှိတဲ့ အခန်းတခုချင်းဆီုကို loop ပတ်ပီး အဲ့အခန်းထဲကတန်ဖိုးကို elementထဲမှာထည့်ပေးလိုက်ပီး
တန်ဖိုးကို element ဆိုတဲ့ ကောင်ကတဆင့်သု့းနိုင်မှာဖြစ်တယ်။
for of က immuatable ဖြစ်တဲ့တွက်ကြောင့် let element အစား const elementကိုသုံးဖို့ အကြံပြုချင်တယ်။
မြင်သာအောင်ပြရမယ်ဆိုရင်
let data = [1, 2, 3, 4, 5, 6, 7, 8, 9], sum = 0; 
for(let element of data) {
    element *= element;
}

data; // [1, 2, 3, 4, 5, 6, 7, 8, 9]
loop bodyမှာ element တန်ဖိုးကိုပြောင်းလဲလိုက်ပေမဲ့
နောက်ဆု့းတန်ဖိုးမှာတော့ မပြောင်းလဲဘူးဆိုတာကိုတွေ့ရမှာဖြစ်တယ် ဒါကြောင့်မို့ const နဲ့သုံးဖို့ အကြံပြုတာဖြစ်တယ်။

အဲ့တော့ objectကို for / ofနဲ့သုံးကြည့်မယ်ဆိုရင်
let obj = {
    name: 'HWH',
    age: 21
}

for(let data of obj){
    console.log(data);
}
အဲ့ကုဒ်ကိုတာ runလိုက်မယ်ဆို obj is not iterable
အဲ့ error တန်ဖိုးထွက်လာမှာဖြစ်တယ်။ဘာလို့လဲဆိုရင် objectက iterableမဟုတ်လို့ပဲဖြစ်ပါတယ်
အဲ့ကြတော့ object ကို for of နဲ့သုံးချင်ရင် အောက်ပါနည်းလမ်းတေွတိုင်းသု့းလို့ရနိုင်ပါတယ်။

for(let key of Object.keys(obj)){
    console.log(obj[key]);
}

for(let value of Object.values(obj)){
    console.log(value)
}

for(let (key, value) of Object.entries(obj)){
    console.log(key, value)
}

for/in
- ကကျတော့ iterable ဖြစ်ဖို့မလိုပါဘူး သူကကျတော့ဘယ်လိုလုပ်လဲဆိုရင် keyရှိတဲ့ကောင်ကို ယူပီးလုပ်ဆောင်တာဖြစ်တယ်။
အောက်ကလိုမျိုးပဲရေးသားနိုင်ပါတယ်။
let obj = {
    name: 'HWH',
    age: 21
}

for(let key in obj){
    console.log(obj[key])
}

5.5 Jumps
- control statment တွေကနေကျော်ချင်တယ်ဆိုရင်သုံးပါတယ်။
သူကလဲ statement အမျိုးစားပဲဖြစ်တယ်။

break
- သူ့ကို ဘယ်ချိန်မှာသုံးလဲဆိုရင် လက်ရှိရှိနေတဲ့ loop or switchကနေထွက်ဖို့ဆိုရင်သုံးပါတယ်။
ဘယ်ကောင်ကို break ဖြစ်သွားလဲဆိုရင် innermostကောင်ကို breakလုပ်ပီး ထွက်သွားမှာပဲဖြစ်ပါတယ်။
ဥပမာအနေနဲ့ဆိုရင် အောက်ကကောင်ကိုကြည့်ရအောင်
for(let i=0; i < 10; i++)
{
    console.log('Counter ',i);
    if(i==5)
    {
        break;
    }
}
console.log('End of body');

ဒီမှာဆိုရင် i ရဲ့တန်ဖိုးက 5ဖြစ်ရင် breakလုပ်မယ်လုိ့ရေးထားပါတယ် 
အဲ့တာမို့ i တန်ဖိုးက 5ဖြစ်တာနဲ့ for loopကနေထွက်သွားမှာပဲဖြစ်ပါတယ်။
တန်ဖိုးကတော့ အောက်ပါတ်ိုင်းရမှာဖြစ်တယ်။
Counter  0
Counter  1
Counter  2
Counter  3
Counter  4
Counter  5
End of body

Continue
သူကကျတော့ ဘယ်လိုအလုပ်လုပ်လဲဆိုရင် continue လို့ရေးထားတဲ့အောက်ကကောင်တွေကို ဆက်မလုပ်တော့ပဲ
loopကို ကျော်လိုက်ပီး နောက်loop အဆင့်ကိုရောက်သွားမှာဖြစ်ပါတယ်။
ဥပမာကိုကြည့်ရအောင်
for(let i=0; i < 10; i++)
{
    if(i==5)
    {
        continue;
    }

    console.log('Counter ',i);
}
console.log('End of body');

ဒီမှာဆိုရင် i ရဲ့တန်ဖိုးက 5ဖြစ်ရင် continueလုပ်မယ်လုိ့ရေးထားပါတယ် 
အဲ့တာမို့ i တန်ဖိုးက 5ဖြစ်တာနဲ့ loop body အောက်က statements တွေကို ဆက်မလုပ်တော့ပဲနဲ့
နောက်ထပ်loop အခြေနေတခုကိုပြောင်းသွားမှာပြဖြစ်တယ်။
တန်ဖိုးကတော့ အောက်ပါတ်ိုင်းရမှာဖြစ်တယ်။
Counter  0
Counter  1
Counter  2
Counter  3
Counter  4
Counter  6
Counter  7
Counter  8
Counter  9
End of body

Labeled Statements
သူ့ကကျတော့ ဘာလဲဆိုရင် ပုံမှန် break, continueက innermost ဖြစ်တဲ့ loop or switch
ကိုပဲအလုပ်လုပ်မှာဖြစ်တယ်။ အဲ့လိုမဟုတ်ပဲ loop ၂ထပ်ရှိပီး အတွင်းက loopကနေ အပြင်က
loopကို break or continueလုပ်ချင်ရင် labelတခုပေးပီး label statment အနေနဲ့သု့းနိုင်ပါတယ်။
အောက်က ဥပမာလေးကိုကြည့်ရအောင်

outer: for(let i = 0; i < 5; i++){
    console.log('Outer ', i);
    for(let j = 0; j < 5; j++){
        console.log('Inner ', j);
        if(j == 1){
            break outer;
        }
    }
}
console.log('End of Loop');

ဒီဥပမာမှာဆိုရင် အပြင်က loop အတွက် label တခုထားထားပီး inner loopက jတန်ဖိုးက 1နဲ့
ညီရင် outer loop ရဲ့ label ကို berakလုပ်လိုက်တာပဲဖြစ်တယ်
ဒါ့ကြောင့် အဖြေကတော့ အောက်ကလိုပြရမှာဖြစ်တယ်။
Outer 0
Inner 0
Inner 1
End of Loop

တကယ်လိုတာ အပေါ်က ဥပမာကို label break မလုပ်ပဲ ရိုးရိုးပဲ break လုပ်မယ်ဆိုရင်တော့ 
အောက်ကလို result ရမှာဖြစ်တယ်။ ဘာလို့လဲဆိုရင် အထက်ကပြောခဲ့သလို innermostကိုပဲ 
လုပ်တာဖြစ်လို့ဖြစ်တယ်။ အောက်က ဥပမာကိုပြန်ကြည့်ရအောင်

for(let i = 0; i < 5; i++){
    console.log('Outer ', i);
    for(let j = 0; j < 5; j++){
        console.log('Inner ', j);
        if(j == 1){
            break;
        }
    }
}
console.log('End of Loop');
Outer 0
Inner 0
Inner 1
Outer 1
Inner 0
Inner 1
Outer 2
Inner 0
Inner 1
Outer 3
Inner 0
Inner 1
Outer 4
Inner 0
Inner 1
End of Loop

return
- ကကျတော့ဘာလဲဆိုရင် function တခုရဲ့ အဆုံးလို့သတ်မှတ်ချင်ရင်သုံးတယ်။
တကဘ်လို့ return statement အောက်မှာ အခြားသော statement တွေရှိနေရင်လဲ ဆက်လုပ်မှာမဟုတ်ပါဘူး။
ဥပမာကုဒ်ကိုကြည့်ကြရအောင်

function returnDemo(){
    console.log('Before Return');
    return;
    console.log('After return');
}

returnDemo(); // Before Return
တကဘ်လို့ ဒီfunctionကိုခေါ်တဘ်ဆိုရင်တော့ Before Returnဆိုတာပဲရမှာဖြစ်တယ်
return ပီးမှထုတ်ထားတဲ့ After Returnကိုတော့ လုပ်ဆောင်သွားမှာ မဟုတ်ပါဘူး

yield
- yield statement ကိုတော့ generator funcitonတွေမှာသုံးပါတယ်။
အကျယ်တ၀ံ့ကိုတော့ နောက်အခန်းတွေမှ ဆက်ရှင်းပါ့မယ်။

throw
- ကတော့ error တခုခုတွေ့ရင် exceptionကို signalအနေနဲ့ လုပ်ဆောင်ပေးတဲ့ကောင်ပဲဖြစ်တယ်။
ဥပမာနေနဲ့ ကိန်းဂဏန်း၂ခုကို စားတဲ့ကောင်ကိုစဥ်းစားရအောင်
တကယ်လို့ ပေးလိုက်တဲ့ ကိန်းတခုခုကတာ number မဟုတ်ဘူးဆိုရင် number မဟုတ်ပါဘူးဆိုတဲ့ 
error ကို signal ပေးမယ်ဆိုရင် အောက်ပါတိုင်းရေးနိုင်တယ်။
syntax အနေနဲ့ကတော့ throw expression;ဆိုပီးပဲဖြစ်တယ်။
ဥပအမာအနေနဲ့ဆိုရင်
function div(a,b)
{
console.log('Div called ',a,' ', b );
if( isNaN(a) || isNaN(b))
{
    throw new Error('some operand is NaN ');
}
return a/b;
}

try/catch/finally
- ဒိကောင်ကကျတော့ ဘယ်လိုနေရာမှာသုံးလဲဆို ခုဏကအပေါ်မှာဖော်ပြခဲ့သလို throw လုပ်ထားတဲ့ Error
တွေကို ပုံမှန်တိုင်းခေါ်လိုက်ရင် error တက်ပီးသွားရင် program crash ဖြစ်သွားတဲ့တွက်ကြောင့် 
အောက်က ကျန်ရှိတဲ့အလုပ်တွေကိုဆက်လုပ်နိုင်မှာမဟုတ်ဘူး။ အဲ့တော့ အဲ့လိုမျိုးမဖြစ်အောင် သုံးတယ်။
try အထဲမှာကျတော့ ခေါ်မယ့် function or statement or expressionကိုရေးပီး
catchထဲမှာကတော့ exception တခုခုဖြစ်ရင် ပြချင်တဲ့ log လိုကောင်မျိုး errorဖြစ်ရင်လုပ်မဲ့
ကောင်တွေရေးပါတယ်။ finally ကတော့ အမြဲ runမဘ့် blockပဲဖြစ်တယ်။ error case ဖြစ်သည်ဖြစ်စေ
မဖြစ်သည်ဖြစ်စေ runမှာဖြစ်ပါတယ်။ သူ့မှာဆိုရင်တော့ db connection ပိတ်တာတွေ
object ကိုပြန် clean တာမျိုးတွေမှာ သုံးသင့်ပါတယ်။
syntax အနေနဲ့ကတော့ 
try{ 
    // statments
}catch(e){
    // exception case 
}finally{
    // always execute
}

အဲ့တော့ အထက်က ဥပမာကိုပြန်ပီးခေါ်မယ်ဆို အောက်ကလို ခေါ်နိုင်တယ်။

try
{
let data = div(NaN,10);
console.log('Data ',data);
}
catch(e)
{
console.log('We catch error ',e);
}
finally
{
console.log('Finally run');
}
console.log('End of program');

div(NaN, 10)ဆိုပီးခေါ်လိုက်မယ်ဆိုရင် div ကနေပီး NaNဖြစ်နေတဲ့တွက် exception throwလိုက်မှာဖြစ်တဲ့တွက်
catchထဲကိုရောက်လာပီး throw လို်ကတဲ့ message dataကိုပြပိး နောက် finally ထဲကကောင်ကို
ဆက်လက်လုပ်ဆောင်မှာဖြစ်တဘ် နောက်ဆုံးမှာမှ ကျန်တဲ့ statementsတွေကိုဆက်လုပ်မှာဖြစ်တယ်။
ရလာဒ်နေနဲ့ကတော့ အောက်ပါတိုင်းပဲဖြစ်တယ်။

Div called NaN 10
We catch error Error: some operand is NaN
Finally run
End of program

5.6 Miscellaneous Statements
with
- ဆိုတာက ဘာလဲဆိုရင်တူညီတဲ့ object တွေကို groupလုပ်ပီး temperaily variable
အနေနဲ့ထားပီး သူ့ရဲ့ block ထဲမှာရှိတဲ့ statmentတွေကို with blockထဲမှာရှိတဲ့ objectရဲ့
data နဲ့ အလုပ်လုပ်ပေးသွားတာမျိုးကိုခေါ်တာဖြစ်တယ်။
syntaxအနေနဲ့ကတော့ အောက်ကလိုမျိုးဖြစ်တယ်။
with (object) statement

ဥပမာအနေနဲ့ဆိုအောက်က example ကိုကြည့်ရအောင်
 <body>
    <form >
        <div>
          <label>Name</label>
          <input type="text" id="lblName" name="lblName"/>
        </div>
        <div>
            <label>Email</label>
            <input type="text" id="lblEmail" name="lblEmail"/>
          </div>
        <button type="button" id="btnClick">
            Click
        </button>
    </form>
</body>
<script>
    document.getElementById('btnClick').addEventListener('click',()=>{
        document.forms[0].lblName.value ='DummyName';
        document.forms[0].lblEmail.value = 'DummyEmail'; 
    });

</script>

ဒီဥပမာမှာဆိုရင်formကို document.forms[0]ဆိုပီးတော့ selectလုပ်ပီး
အဲ့ form ထဲမှာရှိတဲ့ textbox တစ်ခုချင်းစီကို dummy data ထည့်လိုက်တာဖြစ်တယ်
ဒီcodeကိုကြည့်မယ်ဆိုရင် document.forms[0] ကတူနေတာကိုတွေ့ရမယ်
အဲ့ကောင်တွေကို with သုံးပြီးတော့အောက်ပါအတိုင်းပြန်ရေးလို့ရတယ်။
 with(document.forms[0])
{
    lblName.value ='DummyName';
    lblEmail.value = 'DummyEmail';
}

ဘာကိုဆိုလိုတာလဲဆိုရင် အောက်မှာရှိနေတဲ့ lblEmail.value, lblName.value ဟာဆိုရင်
document.forms[0]ဆိုတဲ့ object selectorကနေ သက်ဆိုင်တဲ့ ကောင်ဖြစ်ပီး အဲ့object
ကနေ select လုပ်ထားတယ်ဆိုပီးလုပ်ဆောင်သွားမှာဖြစ်တယ်။

debugger
javascript မှာ debug လိုက်ရင် debugger သုံးလို့ရတယ်။
ဥပမာ အားဖြင့်

function sum(a, b){
    debugger
    return a + b;
}
sum(a, b)
ဒီကုဒ်ကို run လိုက်ရင် sum functionရဲ့ debuggerဆိုတဲ့နေရာမှာ debug ၀င်လာမှာဖြစ်ပီး
မိမိကုဒ်ရဲ့ step တခုချင်းစီမှာဖြစ်သွားတဲ့ အကြောင်းအရာတွေကို trackingလုပ်လို့ရမှာဖြစ်တယ်။
တခုကတော့ ဒီကောင်ကို သုံးတယ်ဆိုရင် production မှာ ဖြတ်ခဲ့ဖို့ မမေ့ဖို့ပဲဖြစ်တယ်။
မဟုတ်ရင်မိမိcodeက production မှာပါ debug mode အထဲ ဝင်နေမှာဖြစ်တယ်

“use strict”
- ကိုဘာလို့ သုံးလဲဆိုရင် JS မှာရှိတဲ့ unexpected or သတိမထားမိတဲ့ error တွေကိုကာကွယ်ဖို့
အသုံးပြုတယ် ။ ဥပမာအားဖြင့်

javascript မှာ variableကို မကြေညာထားဘဲသုံးလို့ရတယ်
username = 'hello';
console.log(username);

တစ်ခါတစ်လေမှာ မကြေညာထားဘဲသုံးတဲ့အတွက် မမျှော်လင့်ထားတယ် error တွေတတ်နိုင်တယ်
အဲ့လို့ကောင်မျိုးကိုကာကွယ်ဖို့ဆိုလို့ရှိရင် use strict ကိုသုံးနိုင်တယ်
'use strict'
username = 'hello';
console.log(username)

'use strict' ကိုတာသုံးလိုက်မယ်ဆိုအောက်ကလိုမျိုး error ထွက်လာမှာဖြစ်တယ်။
' username is not defined' 
မဖြစ်သင့်တဲ့ error တွေကို စောစောကျိုမြင်ပီး ကာကွယ်နိုင်မှာဖြစ်တယ်။

နောက်တခုက 'use strict'ကိုသုံးထားမယ်ဆိုရင် withကိုသုံးလို့ရမှာမဟုတ်ဘူးဖြစ်တယ်။
အထက်က with က use strict modeမှာဆိုရင် error တက်မှာဖြစ်တယ်။

function မှာဆိုရင် default this တန်ဖိုးက window objectကိုရည်ညွှန်းတယ်
တကယ်လို့ strict မှာဆိုရင်တော့ အဲ့ကောင်က current function ကိုညွှန်းတာဖြစ်တဲ့တွက်
undefined ဆိုပီးထွက်မှာဖြစ်တယ်။ အောက်က ဥပမာကို ကြည့်ကြရအောင်။
function hello(){
    console.log(this); // window object here
}

'use strict'
function hello(){
    console.log(this); // undefined
}

နောက်တခုက eval. use strict mode မဟုတ်ဘူးဆိုရင် eval ထဲကို အခြား တန်ဖိုးတခုခုထည့်လို့ရတယ်
ဥပမာအားဖြင့်
let eval = 'something';
console.log(eval);

ဒါပေမဲ့ strict modeမှာဆိုရင်တော့ အဲ့ကောင်က 'Unexpected eval or arguments in strict mode'
ဆိုပီးတက်မှာဖြစ်တယ်။ language ရဲ့ default featuresတွေကို ပြန်လည်ပြင်ဆင်ခွင့် မပေးတဲ့ သဘောမျိုးဖြစ်တယ်။

readonly propertiesတွေကို use strict mode မဟုတ်ရင်ပြင်လို့ရတယ် ဥပမာအားဖြင့်
windowရဲ့ topကိုပြင်လိုက်လို့ရတယ်။ ဒါပေမဲ့ တန်ဖိုးတော့ပြောင်းလဲသွားမှာ မဟုတ်ပါဘူး
window.top = 10;
console.log(window.top)

တကယ်လို့ use strictမှာဆိုရင်တော့ အောက်ပါတိုင်း error တွေ့ရမှာဖြစ်တယ်။
'use strict'
window.top = 10;
console.log(window.top)
Cannot set property top of #<Window> which has only a getter

strict mode မဟုတ်ရင် ကျွန်တော်တို့က delete ကိုသုံးပီး variableကို ဖြတ်လို့ရတယ်။
ဒါပေမဲ့ပြတ်သွားမှာတော့မဟုတ်ပါဘူး။ ဘာလို့ဆို delete က object properties, array indexတွေကို
သာလျှင် ဖြတ်လို့ရတာဖြစ်တယ်။ အဲ့လိုဖြတ်လို့မရတဲ့ကောင်တွေကို ဖြတ်ရင် ဖြတ်မသွားပေမဲ့ ဘာမှ error တနဖိုးထွက်လာမှာမဟုတ်ပါဘူး
မဖြစ်သင့်ဘူးပေါ့ အဲ့တာကို ကာကွယ်ချင်ရင် strict modeကိုသု့းလို့ရတယ်။
'use strict'
delete something
// Delete of an unqualified identifier in strict mode.

အထက်ကလို ဖြတ်မရပါဘူးဆိုတဲ့ error တက်မှာဖြစ်တယ်။

နောက်တခုက writteable မဟုတ်တဲ့ objectတွေကိုပြင်မယ်ဆိုရင် dataက တကယ်မပြင်သွားပေမဲ့
ပြင်ခွင့်ပေးတယ်။ အောက်က ဥပမာကိုကြည့်ရအောင်
let obj = Object.create({}, {
    x: {
        value: 1
    }
})
console.log(obj); // {x: 1}
obj.x = 2
console.log(obj); // {x: 1}

အဲ့လိုမျိုး မဖြစ်သင့်တဲ့ error တွေကို ကာကွယ်ဖို့ဆိုရင် use strict ကိုသုံးလို့ရတယ်။
'use strict'
let obj = Object.create({}, {
    x: {
        value: 1
    }
})
console.log(obj); // {x: 1}
obj.x = 2
console.log(obj); // {x: 1}

အဲ့လိုတာသုံးလိုက်မယ်ဆို အောက်ပါ error တက်မှာပဲဖြစ်တယ်။
Cannot assign to read only property 'x' of object

အဲ့တော့ use strict ကိုသုံးတာက ဘာကောင်းလဲပေ့ါ။ ကျွန်တော်တို့ သတိမထားမိတဲ့ အမှားတွေကို ကာကွယ်နိုင်မှာဖြစ်တယ်။
language designအ၇ မဖြစ်သင့်တဲ့အရာတွေ မဖြစ်နိုင်တဲ့အရာတွေကို စောစောသိပီး errorကို 
စောစောသိနိုင်တယ်။ ဒါမို့ use strcitကိုသုံးဖို့ recommendပေးချင်ပါတယ်။

const, let, var
- ဆိုတာက variable ကိုကြေညာရင်သု့းတဲ့ keywordsတွေပဲဖြစ်တယ်။
သူတို့က ဘာကွာလဲဆိုရင် scope ကွာတယ်။ ဟုတ်ပီ scope ဆိုတာက ဘာလဲဆိုရင်
variable တခု ကိုယူသု့းနိင်တဲ့ နယ်ပယ်ကိုပြောတာဖြစ်တယ်။
const, let ကတော့ block scope ဖြစ်ပီး varကတော့ function scopeဖြစ်တယ်။
ဟုတ်ပီ မြင်သာအောင် ဥပမာအနေနဲ့ကြည့်ရအောင်

function scopeCheck(){
    let hello = 'hello';
    console.log('Before scope changed ', hello)
    {
        let hello = 'hello world';
        console.log('Inside scope changed ', hello);
    }

    console.log('After scope changed ', hello)
}
scopeCheck()

ဒိကုဒ်ကိုတာ runလိုက်မယ်ဆိုရင် အောက်ပါတ်ိုင်းရမှာဖြစ်တယ်။
Before scope changed  hello
Inside scope changed  hello world
After scope changed  hello

ပထမ scope အပြင်က ကျေညာထားတဲ့ တန်ဖိုး hello ကို ထုတ်ပီး 
scope ထဲမှာ တန်ဖိုးတခုကိုပြန်ကြေညာပီးထည့်လိုက်တဲ့ hello worldဆိုတာ ထွက်လာမှာဖြစ်တယ်။
အဲ့ တန်ဖိုးပြောင်းလိုက်တဲ့ block ပီးလို့ ပြန်ပီးတန်ဖိုးထုတ်ကြည့်ရင်တော့ helloဆိုတာကိုပဲတွေ့ရမှာဖြစ်တယ်။
ဘာလို့လဲဆိုရင် letက block scope ဖြစ်တဲ့တွက်ကြောင့် block ထဲမှာရှိတဲ့ hello က block အပြင်မှာဆိုရင်
သူ့ရဲ့ lifetime က မရှိတော့လိုဖြစ်တယ်

အဲ့ကုဒ်ကိုပဲ ကျွန်တော်တို့က var နဲ့ရေးကြည့်ရအောင်
function scopeCheck(){
    var hello = 'hello';
    console.log('Before scope changed ', hello)
    {
        var hello = 'hello world';
        console.log('Inside scope changed ', hello);
    }

    console.log('After scope changed ', hello)
}
scopeCheck()
ဒိကုဒ်ကိုတာ runလိုက်မယ်ဆိုရင် အောက်ပါတ်ိုင်းရမှာဖြစ်တယ်။
Before scope changed  hello
Inside scope changed  hello world
After scope changed  hello world

ပထမ scope အပြင်က ကျေညာထားတဲ့ တန်ဖိုး hello ကို ထုတ်ပီး 
scope ထဲမှာ တန်ဖိုးတခုကိုပြန်ကြေညာပီးထည့်လိုက်တဲ့ hello worldဆိုတာ ထွက်လာမှာဖြစ်တယ်။
ဒါပေမဲ့ ဒီမှာကြတော့ တန်ဖိုးပြောင်းလိုက်တဲ့ block ပီးလို့ ပြန်ပီးတန်ဖိုးထုတ်ကြည့်ရင်တော့ hello worldဆိုတာကိုပဲတွေ့ရမှာဖြစ်တယ်။
ဘာလို့လဲဆိုရင် varက function scope ဖြစ်တဲ့တွက်ကြောင့် 
funtion ထဲက မည်သည့်နေရာကမဆိုတန်ဖိုးပြောင်းလဲလိုက်ရင် ကျန်တဲ့နေရာမှာပါ သက်ရောက်မှုရှိမှာဖြစ်တယ်။
နောက်တခု var ကိုသုံးပီး funtion အပြင်မှာ variable ကိုကြေညာလိုက်တယ်ဆိုရင် 
သူက window ရဲ့ properties အနေနဲ့ ဖြစ်သွားတယ်ဆိုတာကို သိထားရမယ်။
ဥပမာအားဖြင့်
var age = 21;
console.log(window.age); // 21

ဒီမှာဆိုရင် ageဆိုတဲ့variable ကို var နဲ့ကြေညာလိုက်တယ်။
ဒါပေမဲ့ သူ့ရဲ့တန်ဖိုးကို window.ageဆိုပီး ထုတ်ကြည့်ရင် 21ဆိုတာတွေ့၇မှာဖြစ်တယ်။
တကယ်လို့ windowဆိုတဲ့ propertiesကို logထုတ်ပီးရှာမယ်ဆို ageဆိုတဲ့ကောင်ကို တွေ့ရမှာဖြစ်တယ်။

var, const, let ကတော့ scope ကွာတာဖြစ်ပီး။ const နဲ့ let ကကျတော့ ဘာကွာလဲဆိုရင်
တန်ဖ်ိုးကို ပြန်ပြင်လို့ရမရကွာတာဖြစ်တယ်။
တကယ်လို့ တန်ဖိုးက ပြောင်းလဲနေမှာဆိုရင် let ကိုသု့းသင့်ပီး PIလိုမျိုးမပြောင်းလဲတဲ့တန်ဖိုးဆိုရင်တော့
const ကိုသုံးသင့်ပါတယ်။
ဥပမာ အနေနဲ့ဆိုရင်
let userName = 'HWH'
username = 'Hein';
const PI = 3.14;

ဟုတ်ပီ ကျွန်တော်တို့က PI const တန်ဖိုးကို ထပ်ပီး ပြင်လိုက်မယ်ဆိုရင် ဘာဖြစ်မလဲဆိုအောက်က error တက်မှာဖြစ်ပါတယ်။
PI = 3.14159;
// Assignment to constant variable.


































































































































































































































































































































































































