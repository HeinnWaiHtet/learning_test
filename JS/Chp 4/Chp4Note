Expression
-ဆိုတာက တန်ဖိုးထုတ်ပေးတဲ့ကောင်မှန်သမျှကိုခေါ်တာ ဥပမာဆို 
let a = 10;
အဲ့မှာဆို 10ဆိုတဲ့ တန်ဖိုးကိုထုတ်ပေးတဲ့ကောင်ဖြစ်တဲ့ ညီမျှခြင်းညာဘက်ကကောင်က expression လို့
ခေါ်တယ်။
နောက်တခုနေနဲ့ဆို 
let b = a + 10;
အဲ့မှာဆို a + 10 ကို expression လို့ခေါ်တယ်။

Primaray expression or Simple Expression
- ဆိုတာက constant or literal values, certain language keywords, and variable references.
တနဖိုးတွေကိုဆိုလိုတာပါဖြစ်တယ်။
ဥပမာဆို
1.23
'Hello World'
/pattern/

true
false
null
this
အဲ့တန်ဖိုးတွေကို ပြောတာပဲဖြစ်တယ်

Function Definition Expression -
ဆိုတာက funtion ကို funtion ကို lateral နည်းနဲ့ကြေညာတာကိုခေါ်တယ်။

eg. let square = function(x) { return x * x; };

Property Access Expression ဆိုတာက property value တွေကိုdot ခေါက်ပြီးတော့
ဒါမှမဟုတ် bracket နဲ့ object Property or funtion တွေကို ခေါ်တာကိုခေါ်တာဖြစ်တယ်။
ဥပမာအနေနဲ့ဆို
let o = {x: 1, y: {z: 3}}; 
let a = [o, 4, [5, 6]]; o.x
o.y.z
o["x"]
a[1]
a[2]["1"]
a[0].x

Conditional Property Access
ဆိုတာက condition ပေါ်မှာ မူတည်ပီးတော့မှ properties ကိုခေါ်တာမျိုးကိုခေါ်တာဖြစ်တယ်
ဥပမာဆို 
let obj = {x: 1, y: 2};
အဲ့မှာ obj?.x ဆိုပီးခေါ်တာမျိုးကိုပြောတာဖြစ်တယ်။
ဆိုလိုတာက objက null ဖြစ်နေရင် နောက်က expression ကို ဆက်မလုပ်ဘူး
အဲ့လိုကောင်မျိုးကိုခေါ်တာဖြစ်တယ်။

array မှာ တန်ဖိုးရှိမှခေါ်မယ်ဆိုရင်ကျတော့ arr?.[index]ဆိုပီးသုံးတယ်

function တခုကို ခေါ်တာကိုကြတော့ Invocation Expression ဆိုပြီးတော့
အပေါ်ကလို obj က null ဖြစ်မဖြစ်ပေါ်မှာမူတည်ပီး ခေါ်တာကိုကြတော့ conditional Invocationလို့ခေါ်တယ်။

eg. obj?.functionName()

new နဲ့ object ဆောက်တာကိုကျတော့ Object creation Expression လို့ခေါ်တယ်။

Operator
operation ကိုလုပ်ပြီးတော့တန်ဖိုးတခုပြန်ထုတ်ပေးတာကို operator လို့ခေါ်တယ်။
operator တွေကိုဘာနေရေးလဲဆိုလို့ရှိရင် punctuation character နဲ့ရေးတယ်။
eg. + , - , * , / , % , ** , < , > , <= , >= , == ,!= , === ,!== , && , || ,
တချို့ operator ကြာတော့wordလေးတွေပါတယ်
ဘယ်လိုကောင်မျိုးလဲဆိုလို့ရှိရင် delete, instanceof, typeof လိုကောင်မျိုးတွေဖြစ်တယ်။

pre or post increate ++
eg. let counter = 0;
let var = counter++;
သူ့ရဲ့အဓိပ္ပါယ်ကပါတဲ့ဆိုလို့ရှိရင်counterတန်ဖိုးကိုvalueထည့်မယ်။
ပြီးတော့မှcounterကို1တိုးမယ်။

အဲဒါကိုဘာလို့ခေါ်လဲဆိုလို့ရှိရင် postfix လို့ခေါ်တယ်။
အဲ့တာကိုပဲ prefix နဲ့ရေးမယ်ဆိုရင်ကျတော့ သူက counter တန်ဖိုးကို အရင်တုိးပီးမှ
တန်ဖိုးကို value ထဲထည့်မယ်။
let var = ++counter;

သူံရဲ့ associativity ကျတော့ rightဖြစ်တယ် ဘာလဲဆိုရင် 
တကယ်လို့ presendence တူတာခြင်းဆို ဘယ်ကောင်ကို အရင်လုပ်မလဲဆိုတာဖြစ်တယ်။

rightဖြစ်တဲ့အတွက်ကြောင့်rightကောင်အရင်လုပ်မည်
associativityက ဘာကိုပြောချင်တာလဲဆိုလို့ရှိရင်levelတူးချင်ရှိတဲ့ကောင်ဆိုရင်
ဘယ်ကောင်ကိုအရင်လုပ်မှာလဲဆုံးဖြတ်တာမျိုးကိုခေါ်တယ်။
Eg. 2 ** 3 ** 2 ဆိုရင် 512ရလိမ့်မယ် ဘာလို့ဆို associativity right ဖြစ်တဲ့တွက်
3 ** 2 ကို အရင်လုပ်ပီးမှ ရတဲ့တန်ဖိုး ကို 2 ** 9ဆိုပီးလုပ်လို့ဖြစ်တယ်။

operator တွေက precedence level တူရင် ဘာနဲ့ထပ်ခွဲလဲဆိုလို့ရှိရင်associativityနဲ့ပြန်ခွဲတယ်။
Nက ဘာကိုဆိုလိုလဲဆိုရင် no of operand ကိုပြောတာဖြစ်တယ်။
++လုပ်မယ်ဆိုရင် vaiable 1လုံးပဲလိုတယ်။

Type က lval -> num ဆိုတာက lvalက input, num ဆိုတာက output ခေါ်တယ်
lvalဆိုတာက variable တွေကိုပြောတာဖြစ်တယ်။
rvalဆိုတာက assignment ရဲ့ ညာဘက်မှာရှိတဲ့ကောင်တွေကိုပြောတာဖြစ်တယ်။
anyဘာပဲလာလာရတယ်လို့ပြောတာဖြစ်တယ်။

operator precidenceအရဆိုလို့ရှိရင်unary operatorတွေကအမြင့်ဆုံးဖြစ်တယ်

binary operator ဆိုတာကoperand နှစ်ခုလိုတဲ့ကောင်တွေဆိုတာဖြစ်တယ်။
 
eg. let result = 1 + 4 / 2 * 5;
expressionကိုကြည့်လိုက်လို့ရှိရင် ပထမဆုံး precidence အနေနဲ့အရင်ကြည့်တယ်
တကယ်လို့ presidence ကတူနေတယ်ဆိုရင် associativityကိုပြန်ကြည့်တယ်
ဒီကောင်မှာဆိုလို့ရှိရင်အစားနဲ့အမြောက်ကprecidenceတူတယ်
associativity ပြန်ကြည့်ရင် leftဖြစ်တဲ့တွက် leftဖြစ်တဲ့အစားကိုအရင်လုပ်တယ်
ပြီးတော့မှ အမြောက်တန်ဖိုးကိုဆက်လုပ်တယ်။
နောက်ဆုံးမှ တန်ဖိုးကိုပေါင်းတယ်။
operator တွေကအဲလိုနည်းလမ်းအတိုင်းလုပ်ဆောင်တယ်
presidence နည်းတဲ့ကောင်ကိုအရင်လုပ်စေချင်တယ်ဆိုရင်သူ့ကို လက်သည်းကွင်းထဲမှာ ထည့်ပီးလုပ်ဆောင်ရမယ်။

ဘာလို့လဲဆိုရင်သူကpresidenceအမြင့်ဆုံးမို့လို့ဖြစ်တယ်။

open သုံးခုလိုအပ်တဲ့ကောင်အနေနဲ့ဆို ternaryတခုပဲရှိတယ်။

precedenceအနိမ့်ဆုံးကောင်က assignment operator တွေဖြစ်တယ်။
သူတို့ကဘယ်လိုသွားလဲဆိုရင်right to leftသွားတယ်။

operator side effect ဆိုတာကမူလတန်ဖိုးကိုပြောင်းသွားစေတာမျိုးကိုခေါ်တယ်။

ဥပမာအပေါင်း အပေါင်းဆိုလို့ရှိရင်ကတန်ဖိုးကိုမပြောင်းလဲဘူး
let a = 10;let b = 20;
a + b
ဆိုရင်aတန်ဖိုးလည်းမပြောင်းလဲသလို bတန်ဖိုးလည်းမပြောင်းလဲဘူး။
အဲ့တာဆို သူ့မှာ side effectမရှိဘူး
++ ဆိုရင် မူလရှိနေတဲ့တန်ဖိုးကို ၁တိုးသွားတယ်။
အဲလိုကောင်မျိုးကိုside effectရှိတာလို့ခေါ်တယ်။
ကျန်တဲ့ကောင်က delete လို့ကောင်မျိုး
သူဆိုရင်လည်းမူရင်းရှိနေတဲ့objectတန်ဖိုးရဲ့ propertiesတွေကိုဖျက်ပစ်နိုင်တယ်

Order of Evaluationဆိုတာက ဘယ်ကောင်ကို အရင်လုပ်မှာလဲဆိုတာ ဆုံးဖြတ်တာမျိုးဖြစ်တယ်။


+ operator
operand နှစ်ခုထဲကတစ်ခုခုသည် stringဖြစ်ခဲ့ရင် string concatenation ကိုအလုပ်လုပ်တယ်။ 
eg. '2' + 3 + 3 ဆိုရင် operator precedenceအရ string concatenationကနိမ့်တယ်
ဒါပေမဲ့associativityကိုပြန်ကြည့်ရင် left to right ဖြစ်တဲ့တွက်ကြောင့် left က
string concatenationကို အရင်လုပ်ပီးမှ ညာဘက်ကကောင်ကို ဆက်လုပ်တဲ့တွက်ကြောင့်
string တန်ဖိုးရမှာဖြစ်တယ်။

array နဲ့ပေါင်းမယ်ဆို array ကို toStringပြောင်းပစ်ရတယ်
eg. '2' + [10, 20, 30] ဆိုရင် '210,20,30'ဆိုတာရတယ်။

တကယ်လို့ object တခုတာပါခဲ့ရင် အဲ့object ကို အရင်ဆုံး primitive type ပြောင်းတယ်။

အဲလိုပြောင်းပီးမှသက်ဆိုင်ရာoperation ကိုဆက်လုပ်တာဖြစ်တယ်

one of the operandသည်stringမဟုတ်ဘူးဆိုရင်number operational လုပ်မယ်
eg. false + 3 မှာဆိုရင်နှစ်ခုလုံးကstringမဟုတ်တဲ့အတွက်ကြောင့်numberပြောင်းပြီးတော့လုပ်ဆောင်မယ်

https://262.ecma-international.org/5.1/
11.6.1

Object ကို number ပြောင်းမယ်ဆိုရင် side effect ဖြစ်ပီး objectက number
အနေနဲ့ပြောင်းသွားမှာဖြစ်တယ်။

let obj = {};
++obj;
console.log(typeof obj);

Bitwise operator တွေက bit 0,1 ပေါ်မှာ မူတည်ပီးလုပ်သွားတာမျိုးဖြစ်တယ်။
AND &, OR |, Not !, XOR^ ဆိုပီးရှိတယ်။

let a = 2;
console.log(a.toString(2)); 
ဆိုရင် 2 ကို base 2အနေနဲ့ပြောင်းလဲသွားမှာြဖစ်ပီး တန်ဖိုးဆို 10ဆိုပီးရမှာဖြစ်တယ်။

Shift left ဆိုတာက ဘယ်ဘက်ကိုရွေ့တာကိုခေါ်တယ်။
Eg. 2 << 1ဆိုရင် ဘယ်ဘက်ကိုပြောင်းလိုက်တဲ့တွက်
10 << 2 ကနေ 100 ဆိုပီး တန်ဖိုး 4ရသွားမှာဖြစ်တယ်။
ဒိကောင်တွေကို ဘယ်တွေမှာသုံးလဲဆို image processing, crytography တွေမှာသုံးတယ်။

Shift right ဆိုရင်က left နဲ့ပြောင်းပြန် ညာဘက်ကိုရွေ့မှာ ဖြစ်တယ်။

relational operatorဆိုတာကကြီးသလားငယ်သလားညီသလားစစ်တာမျိုးခေါ်တယ်။
Eg. ==, > , >=, < , <=,!=,!== ဆိုပီးရှိတယ်။

equality မှာနှစ်မျိုးရှိတယ်
value equality ==, strict equality === ဆိုပီးရှိတယ်
==က တန်ဖိုးတူညီရပြီကျန်တာတူစရာမလိုဘူး
===ကတော့တန်ဖိုးကောtypeကောတူဖို့လိုအပ်တယ်
recommand အနေနဲ့ဆို strict equality ကိုသုံးသင့်တယ်။

double equal ကိုabstract equality လို့ခေါ်တယ်။
https://262.ecma-international.org/5.1/#sec-11.9.3
11.9.3

1. Typeနှစ်ခုလုံးကတူတယ်ဆိုရင်
 1.1. x က undefinedဆိုရင် true
 1.2. x က nullဆိုရင် true
 1.3. Numberဆိုရင်
    1.3.1. x or y က NaN ဆိုရင် false
    1.3.2. x က +0 y က -0 ဆိုရင် true
    1.3.3. x က -0 y က +0 ဆိုရင် true
    1.3.4 ကျန်တာဆို false
 1.4. xက ​Stringဆိုရင် x and y same character တွေမှာရှိရင် true  မဟုတ်ရင် false
 1.5. x က boolean ဆိုရင် 2နှစ်ခုလုံးတူရင်true မတူရင် false
 1.6. x and y က same objectဆို true မဟုတ်ရင် false

2. x null y undefinedဆိုရင် true
3. x undefined y nullဆိုရင် true
4. x number and y string x ==  yကုိ numberပြောင်းတဲ့တန်ဖိုးနဲ့ နိုင်းယှဥ်ပီးပြန်
5. x string and y number ToNumber(x) == y ကိုပြန်ပေးမယ်။
6. x boolean ဆိုရင် ToNumber(x) == y ကိုပြန်ပေးမယ်။
7. y boolean ဆိုရင် x == ToNumber(y) ကိုပြန်ပေးမယ်
8. x string or number y object ဆိုရင် x == ToPrimitive(y) ကိုပြန်ပေးမယ်။
9. x object and y string or number ဆိုရင် ToPrimitive(x) == y ကိုပြန်ပေးမယ်။
10. အပေါ်ကဟာတွေမဟုတ်ရင် false

Comparison Operator
ကြီးလာငယ်လားညီလားစစ်တာမျိုးကိုပြောတယ်
>, >=, <, <=,!=, === ဆိုပီးခေါ်တာမျိုးကိုပြောတာဖြစ်တယ်။
အဲ့ကောင်တေွမှာဆို operand ဘာပဲပေးပေး numberပြောင်းပြီးမှလုပ်တာဖြစ်တယ်။
1. objectပါတယ်ဆိုရင်တန်ဖိုကို ToPrimitiveပြောင်းပြီးတော့လုပ်ဆောင်တယ်။
2. နှစ်ဖက်စလုံးက string ဖြစ်တယ်ဆိုရင် string comparisonကိုလုပ်တယ်
eg. 'apple' > 'banana' ဆိုပီးခေါ်တာမျိုးကိုပြောတာဖြစ်တယ်။
ဘယ်လိုနှိုင်းယှဉ်လဲဆိုရင် character code အရ ယှဥ်တာဖြစ်တယ်။

In Operator
in opeartorက keyရှိလားမရှိဘူးလားစစ်ချင်ရင်သုံးတယ်။
syntaxအနေနဲ့ဆိုရင် left side မှာက string, symbol or value ဖြစ်ရမယ်။
eg. 'name' in obj, 1 in arr
objectမှာဆိုရင် object ရဲ့ keysရှိလားဆိုတာမျိုး
arrayမှာကျရင်တော့ index မှာ တန်ဖိုးရှိလားဆိုတာမျိုးကိုသုံးတယ်။
ဥပမာဆို 

let obj = {
   name : "TK",
   age  : 38
};
console.log(" 'name' in obj ", 'name' in obj);
console.log(" 'toString' in obj ", 'toString' in obj);
let arr = [10,,20,30];
console.log('1 in arr ', 1 in arr);
console.log('Arr[1 ] ',arr[1]);

arr = [10,undefined,20,30];
console.log('1 in arr ', 1 in arr);

ပထမ nameဆိုတဲ့တန်ဖိုးကိုစစ်ရင် true ပြန်မယ်
object တွေမှာtoStringက default ပါပီသား ဖြစ်တဲ့တွက်ကြောင့် 'toString' in obj ဆိုရင်လည်း true ပြန်မယ်
မရှိတဲ့ propertiesကိုစစ်မယ်ဆို false ပြန်မယ်

array မှာ index တွေကိုစစ်တာမို့ 1 in arr ဆိ ုရင် true ပြန်မယ်။
ဒါပေမဲ့ arr[1] ကိုကြည့်ရင် ဘာမှတန်ဖိုးသတ်မှတ်ထားတာမရှိတဲ့တွက် undefined ကိုပဲပြန်မှာဖြစ်တယ်။
အောက်ဆုံးက 1 in arrမှာဆိုရင်တော့ တန်ဖိုး undefinedသတ်မှတ်ထားတာရှိတဲ့တွက်ကြောင့် trueပြန်မှာဖြစ်တယ်။

instanceof Operator
operator ရဲ့ ဘယ်ဘက်ကကောင်က operator ညာဘက်က ကောင်ရဲ့ instance ဖြစ်လား မဟုတ်လားစစ်ချင်ရင်သုံးတယ်။

let d = new Date(); // Create a new object with the Date() constructor d instanceof Date // => true: d was created with Date()
d instanceof Object // => true: all objects are instances of Object
d instanceof Number // => false: d is not a Number object
let a = [1, 2, 3]; // Create an array with array literal syntax
a instanceof Array // => true: a is an array
a instanceof Object // => true: all arrays are objects
a instanceof RegExp // => false: arrays are not regular expressions

ပထမ တခု date က object ရဲ့ instance ဖြစ်တာကို စစ်ရင် true ပြန်မယ် ဘာလို့ဆို type အကုန်လုံးရဲ့ root level
က object ဖြစ်လို့ဖြစ်တယ်
ဒါပေမဲ့ instanceof number လားဆိုရင် false ပြန်မှာဖြစ်တယ်
တကယ်လို့ opeartor right hand sideမှာရှီတဲ့ကောင်က object class တခုခုမဟုတ်ရင် TypeError တက်မှာဖြစ်တယ်။

၄.၁၀ Logical Expression
- ဆိုတာဘာလဲဆိုရင် &&, ||, !တို့လိုကောင်မျိုးတွေ ဖြစ်ပါတယ်။
သူ့ကိုဘယ်လိုနေရာမှာသုံးလဲဆိုရင် အခြေနေပေါ်မူတည်ပီး မှန်လားမှားလားဆိုတာမျိုး စစ်ဆေးတဲ့နေရာမှာသုံးတယ်။

သူတို့ကို ဘယ်လိုမျိုးသွားလဲဆိုရင် binary truth table opearion နဲ့အလုပ်လုပ်တာဖြစ်တယ်။
အောက်ကဇယားကိုကြည့်ကြည့်ရအောင်

opearand1   opearand2   AND(&&)   OR(||)   NOT(!)
true        true        true     true     false
true        false       false    true     false
false       true        false    true     true
false       false       false    false    true

ANDကို အလွယ်မှတ်မယ်ဆို operand နှစ်ခုလုံးက trueဖြစ်မှာဖြစ်မယ်
ORကိုကျတော့ opearand2ခုလုံးက falseဖြစ်မှသာ false ပြန်မယ်
NOTကိုကျတော့ opearandတန်ဖိုး တခုတည်းကိုကြည့်ပြ ီးtrue ဆိုfalse, falseဆို trueပြောင်းလဲလိုက်တာဖြစ်တယ်
ဒီနေရာမှာတခုပြန်မှတ်ရမှာက ဒီ true falseတွေက truthy falsyတန်ဖိုးနဲ့ အလုပ်လုပ်တယ်ဆိုတာပဲဖြစ်တယ်။
ပြောချင်တာက အောက်ကလို operation တွေကိုလဲလုပ်ဆောင်ပေးမယ်လို့ဆိုလိုတာဖြစ်တယ်။
console.log('true && "true" ', true && 'true');
console.log('null && "true" ', null && 'true');
console.log('true && {} ', true && {});

အဲ့ကျတော့ပြန်မှတ်မယ်ဆိုရင် 
ANDမှာ first opearnd ကတာ falsyဖြစ်မယ်ဆို false ပြန်မှာဖြစ်ပီး truthyဖြစ်ခဲ့မယ်ဆိုရင်
ညာဘက်ကတန်ဖိုးပြန်ပေးမှာဖြစ်တယ် ညာဘက်ကလို့ဘာလို့ပြောရလဲဆိုရင်
true && 'true' မှာဆိုရင် တန်ဖိုးက string 'true' ပြန်ပေးမှာဖြစ်တယ်

ORမှာကျရင်တော့ first opearand က truthyဖြစ်ရင် first opearandတန်ဖိုး ပြန်မှာဖြစ်ပါတယ်
မဟုတ်ရင်တော့ second operandတန်ဖိုးပြန်ပေးမှာဖြစ်တယ်။
ဥပမာ 'hello' || falseဆိုရင် တန်ဖိုးက stirng 'hello' ပြန်ပေးမှာဖြစ်ပါတယ်။

အဲ့ကျတော့ ဒီကောင်တွေက ဘယ်လိုနေရာတွေမှာအသုံး၀င်လဲပေါ့ react လိုကောင်မျိုးမှာဆို condition ေပါ်မူတည်ပီး
ဘယ်componentပြမယ်ဆိုပီးလုပ်တယ်ဆိုပါဆို ဒါပေမဲ့ အဲ့ကောင်တွေမှာ if statementကိုသုံးမရဘူး အဲ့ကျတော့
 ဒီ logical expression တွေက အသုံးပြုပီးရေးလို့ရတယ်။
 ဥပမာ true && <Component1 />

နောက်တခုက module တွေဆာက်တဲ့နေရာမျိုးမှာလဲသုံးနိုင်တယ်။
ဥပမာ 
window.module = window.module || {
   api : {},
   method()
};
ပြောရမယ်ဆို module ဆောက်ထားပီးပီဆိုရှိနေတဲ့ module ကိုသုံးပီး မရှိသေးရင် အသစ်ဆောက်ပေးလိုက်မယ်
အဲ့လိုမျိုးအနေနဲ့လည်းသုံးနိုင်တယ်။

AND(&&), OR(||) operaotr ကို short circuiting လို့ခေါ်တယ်ဘာလို့လဲဆိုရင် condition တခုက ကိုက်ညီသွားရင် အခြားတခုကို 
ဆက်စစ်စရာမလိုတော့ဘူးဖြစ်တယ်ဥပမာအနေနဲ့ဆို
function getTrue(){
   console.log('Call GetTrue');
   return true;
}

function getFalse(){
   console.log('Call GetFalse');
   return false;
}

console.log(getFalse() && getTrue())ဆိုပီးခေါ်ရင် 
'Call GetFalse'
falseဆိုပီးရမှာဖြစ်တယ်
ANDမှာဆို ဘယ်ဘက်က expressionကမှားတယ်ဆိုတာနဲ့ ညာဘက်ကကောင်ကို ဆက်လုပ်မှာမဟုတ်ဘူးဖြစ်တယ်။

console.log(getTrue() || getFalse())ဆိုပီးခေါ်ရင် 
'Call GetTrue'
trueဆိုပီးရမှာဖြစ်တယ်
ORမှာဆို ဘယ်ဘက်က expressionကမှန်တယ်ဆိုတာနဲ့ ညာဘက်ကကောင်ကို ဆက်လုပ်မှာမဟုတ်ဘူးဖြစ်တယ်။

4.11 Assignment Expressions

တန်ဖိုးတခုကို ထည့်တဲ့အချိန်မှာသုံးတယ်။ တခုမှတ်ရမှာက = operator ရဲ့ left hand sideတန်ဖိုးက
lvalueဖြစ်ရမယ်။ lvalueဆိုတာက variable, property, array element တွေဖြစ်နေဖို့လိုတယ်လို့ဆိုလိုချင်တာဖြစ်တယ်။

obj.name = 'HWH';
arr = [];
age = 10;
အဲ့လိုမျိုးဖြစ်ဖို့လိုတယ်လို့ဆိုလိုတာဖြစ်တယ် အဲ့လိုlvalueမဟုတ်ပဲ
 10 = 10ဆိုတာမျိုး လုပ်ခွင့်မပေးဘူးဖြစ်တယ်။
တကယ်လို့မှားယွင်းစွာ သုံးမိမယ်ဆိုရင် အောက်ပါ error တက်မှာပဲဖြစ်တယ်။
Uncaught SyntaxError: Invalid left-hand side in assignment

assignment operator ကို တခါတည်း opeation တွေနဲ့တွဲပီးလဲလုပ်ဆောင်နိုင်တယ်။
အောက်ကဇယားကို ကြည့်ကြရအောင်။

Operator       Example        Equivalent
+=             a+=b           a=a+b
-=             a-=b           a=a-b
*=             a*=b           a=a*b 
/=             a/=b           a=a/b
%=             a%=b           a=a%b
**=            a**=b          a=a**b      
<<=            a<<=b          a=a<<b
>>=            a>>=b          a=a>>b
>>>=           a>>>=b         a = a >>> b
&=             a&=b           a=a&b
|=             a|=b           a=a|b
^=             a^=b           a=a^b

ပထမဆုံး += ကိုကြည့်ကြရအောင် သူ့ကိုရေးမယ်ဆို a+=b ဆိုပီးရေးမှာဖြစ်တယ်
ဘယ်လိုအလုပ်လုပ်လဲဆိုတော့ a + b ကိုအရင်ပေါင်းမယ်
အဲ့က ရလာတဲ့တန်ဖိုးကိုမှ a တန်ဖိုးထဲကိုပြန်ထည့်ပေးမှာဖြစ်တယ်။
ကျန်တဲ့ operator တွေကလဲ အလားတူလုပ်ဆောင်ချက်မျိုးပဲလုပ်ဆောင်မှာဖြစ်တယ်။

4.12 Evaluation Expressions
- ဆိုတာက string အနေနဲ့ရေးထားတဲ့ javascript expressionတွေကို 
သတ်ဆိုင်ရာ javascript opeartionလုပ်ဆောင်ချက်အနေနဲ့ လုပ်ဆောင်ပေးတာဖြစ်တယ်
ဥပမာဆို
let str = '2 + 3';
console.log(eval(str)); // Output: 5

strထဲမှာ javascript expression ဖြစ်တဲ့ '2 + 3'တန်ဖိုးရှိနေတယ်
အဲ့တာကို ကို eval() function က ဖတ်ပီး အလုပ်လုပ်လိုက်မယ်ဆိုရင် သတ်ဆိုင်ရာ opeartionလုပ်ဆောင်ချက်အနေနဲ့
လုပ်ဆောင်သွားမှာဖြစ်တယ်။
အဲ့တော့ ဘာဖြစ်နိုင်လဲဆိုရင် command injection, code execution လို့ခေါ်တဲ့ security vulnerability တွေဖြစ်လ ာနိုင်တယ်။
ဒါကြောင့် eval() ကိုမသုံးသင့်ဘူးဖြစ်တယ်။ အဲ့တော့တယောက်ယောက်က
ကိုယ့်ရဲ့ user textboxကနေအဲ့လို injectionမျိုးမသုံးနိုင်အောင်ဆိုရင် ဘာလုပ်ရမလဲဆို 'use strict'
ဆိုပီး ကြေညာပီးတော့သုံးလို့ရနိုင်တယ်။
 strict mode ကနေ eval() ကိုသုံးလို့မရတော့ဘူးဖြစ်တယ်။
 ဥပမာ
 'use strict';
let str = '2 + 3';
console.log(eval(str));
 အဲ့လိုမျိုးအသု့းပြုနိုင်တယ်။

 4.13 Miscellaneous Operators

The Conditional Operator (?:)
ဒီကောင်ကဘာလဲဆိုရင်  if-else statement ကိုတစ်ကြောင်းထဲမှာ ရေးနိုင်တဲ့ operator ပဲဖြစ်တယ်။ ဥပမာ-
let age = 18;
let canVote = age >= 18 ? 'Yes' :  'No';
console.log(canVote); // Output: 'Yes'
ဒီဥပမာဆိုရင်  အသက်၁၈နှစ်ရှိတဲ့သူက မဲ ပေးနို့ငရဲ့လား ဆိုတာကို စစ်ဆေးတာပဲဖြစ်တယ်။
အဲ့လိုကောင်မျိုးတွက်ဆိုရင် ပုံမှန် if elseနဲ့မသုံးတော့ပဲ conditional opeartorကိုအသုံးပြုနိုင်တယ်
condition ကမှန်ရင် ?အနော်ကက တန်ဖိုးကို ပြန်မှာဖြစ်ပီး မှာရင်တော့ : အနောက်ကတန်ဖိုးကိုပြန်ပေးမှာဖြစ်တယ်။

First-Defined (??)
- ဒိကောင်ကကျတော့ဘယ်လိုလဲဆိုရင် လက်ရှိတန်ဖိုးက null, undefined တန်ဖိုးဖြစ်လို့ 
defaultတန်ဖိုးတခုခုသတ်မှတ်ချင်တဲ့အခါမျိုးမှာသုံးနို်ငတယ်။
syntax အနေနဲ့ဆို

lval ?? 'Defaul Value';
ဥပမာ
let obj;
obj = obj ??  { name: 'John', age: 30 };
console.log(obj); // Output: { name: 'John'， age: 30 }
ပထမ objတန်ဖိုးက ဘာမှ မထည့်ထားတဲ့တွက် undefinedဖြစ်နေမဘ် အဲ့တော့ 
အောက်မှာကျတော့ တကယ်လို့ obj တန်ဖိုးတာ မရှိဘူးဆို defaul တန်ဖိုးဖြစ်တဲ့
 { name: 'John', age: 30 } ကိုပြန်ပေးမှာပဲဖြစ်တယ်။
ဒါကြောင့်ဒီချိန်မှာ objတန်ဖိုးကိုထုတ်ကြည့်မယ်ဆိုရင် { name: 'John', age: 30 }ဆိုတာကိုရမှာဖြစ်တယ်။

The typeof Operator
- ဒီ operator ကဘာလုပ်တာလဲဆိုရင် variable တစ်ခုရဲ့ data type ကို ပြန်ပေးတာပဲဖြစ်တယ်။
ဥပမာ-
let x = 10;
console.log(typeof x); // Output: 'number'
let y = 'hello';
console.log(typeof y); // Output: 'string'
let z = true;
console.log(typeof z); // Output: 'boolean'
ဒီလိုမျိုး variable တွေရဲ့ data typeကို စစ်ချင်ရင် အသုံးပြုနိုင်တယ်။

The delete Operator
- ဒီ operator ကဘာလုပ်တာလဲဆိုရင် object property, array index value တစ်ခုကို 
ဖျက်ပစ်တဲ့အခါမျိုးမှာသုံးနိုင်တယ်။
ဥပမာ-
let obj = {
   name: 'John',
   age: 30
   };
   delete obj.age;
   console.log(obj); // Output: { name: 'John' }
   let arr = [1, 2, 3, 4, 5];
   delete arr[2];
   console.log(arr); // Output: [1, 2, undefined, 4, 5]

ဒိမှာဆိုရင် ပထမ obj.age ကို ဖျက်လိုက်တဲ့အခါ obj ထဲက age property ကပျောက်သွားပီး
 {name: 'John'} ဆိုတဲ့ object ကိုရမှာဖြစ်ပါတယ်။
 ဒါပေမဲ့ array တန်ဖိုးကို ဖြတ်တဲ့အခါမှာတော့ array indexက ပြတ်မသွားပဲ
 အဲ့အခန်းရဲ့တနဖိုးကိုပဲ ဖြတ်လိုက်တာမျိုးဖြစ်တယ်။
 ဒါကြောင့်မို arr[2] ကိ ုဖျက်လိုက်တဲ့အခ်ါ arr ထဲမှာ undefined တန်ဖိုးကိုရမှာဖြစ်ပါတယ်။
 မူလ array lengthအတိုင်းပဲ ရှိနေမှာဖြစ်ပီး ဖြတ်လိုက်တဲ့အခန်းတန်ဖိုးပဲ 
 undefined ဖြစ်သွားမှာဖြစ်တယ်။

The comma Operator (,)
- ဒီ operator ကဘာလုပ်တာလဲဆိုရင် expression တွေကို ပေါင်းစပ်ပြီး လုပ်ဆောင်တာမျိုးဖြစ်တယ်။
ပြောချင်တာက expression တွေကို ပေါင်းစပ်ပြီး လုပ်ဆောင်တဲ့အခါမှာ right အဖြစ်ဆုံးဘက်ကကောင်ကို
return, evalute လုပ်ပီး leftဘက်က ကောင်တွေကိုကျတော့ ပုံမှန်တိုင်း execute လုပ်သွားမှာဖြစ်တယ်။
ဥပမာအနေနဲ့ဆို
for(let i=0,j=10; i < j; i++,j--) {
   console.log(i+j);
}

ဒီမှာဆို for loopရဲ့ assignment section မှာ comma operator ကို အသုံးပြုပီး
vaiable ၂ခုကိုတခါ တည်းသတ်မှတ်ကြေညာလို့ရတယ်။

နောက်တခုနေနဲ့ဆိုရင်
const sqr = (a) => (console.log('a', a), (a ** a));
console.log(sqr(10)); 
// a, 10
// 10000000000
ဆိုတာမျိးရမှာဖြစ်တယ်။
ပထမ console.log('a', a) ကို ပထမဆုံးလုပ်ပီး a ** a ကို returnပြန်ပေးသွားမှာပဲဖြစ်တယ်။












