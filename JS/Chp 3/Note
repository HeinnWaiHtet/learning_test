What is Variable?
variable ဆိုတာက တန်ဖိုးတခုကို သိမ်းဆည်းပီး နောင်တချိန်မှာ ပြန်သုံးနိုင်အောင်လို့
computer ရဲ့ memory ပေါ်မှာ နာမည်ပေးပီးသတ်မှတ်လိုက်တာပဲဖြစ်တယ်။

အဲ့တော့ ဘာ့ကြောင်လိုအပ်တာလဲ။
ဥပမာနေနဲ့စဥ်းစားမယ်ဆိုရင် ၁၀ နဲ့ ၅ဆိုတဲ့ တန်ဖိုး ၂ခုရှိမယ် 
အဲ့တန်ဖိုး၂ခုပေါ်မူတည်ပီး ပေါင်းနုတ်မြှောက်စား operationတွေလုပ်ကြမယ်
တစ်ချိန်မှာကြ ၁၀ဆိုတဲ့ တန်ဖိုးကို ၁၁ဆိုတဲ့ အခြားတန်ဖိုးတစ်ခုပြောင်းချင်တယ်
အဲ့ကျတော့ ဘာဖြစ်မလဲဆို သူ့ကိုသုံးထားတဲ့နေရာ ၁၀နေရာရှိ ဆယ်နေရာလုံးလိုက်ပြင်ရမယ်
အဲ့တော့ အဲ့လိုမျိုးမဖြစ်အောင် အဲ့တန်ဖိုးကို နာမည်တခု သတ်မှတ်ပီး အဲ့ကောင်ကို ခေါ်သုံးလိုက်တာမျိုးကို
variable လို့ခေါ်တယ်။ အဲ့တော့နောင်တချိန်မှာ ၁၀ကို ၁၁ပြောင်းချင်ရင် အခြားနေရာတွေ
လိုက်ပြင်ဖို့မလုိပဲ တနေရာပဲပြောင်းလိုက်ရင် ရသွားမှာဖြစ်တဘ်။
variable ကြေညာမယ်ဆို အောင်ကပုံစုံတိုင်းကြေညာနိုင်တယ်
keyword vaiablename;
eg. let name = 10;

vaialbe ထဲမှာ တန်ဖိုးကို တန်းထည့်တာကို ဘယ်လိုပြောသေးလဲဆုိရင်
lateral လို့လဲခေါ်တယ်။

keyword အနေနဲ့ var, let နဲ့ const တွေကို သုံးနိုင်တယ်။
ဘာတွေကွာခြားလဲဆို scope or Life timeတွေကွာတယ်။
ဆိုလုိတာ သုံးလို့ရတဲ့နေရာ နယ်ပယ် အကျယ်အ၀န်းကိုပြောတာဖြစ်တယ်။
မြင်သာအောင်ဆို နယ်နိမိတ်တွေအုပ်ချုပ်သလိုပေါ့ Aနယ်ကိုပဲ အုပ်ချုပ်ခွင့်ရှိတဲ့သူက
B နယ်ပယ်ကို သွားအုပ်ချင်လို့မရသလိုမျိုးပေါ့။
var က function scope ဖြစ်တယ်။ ဆိုလိုတာက functionရဲ့ ကြိုက်တဲ့နေရာကနေလှမ်းသုံးနိုင်တယ်
function scope valueကို function ရဲ့ အောက်ဆုံးမှာ ကြေညာပေမဲ့ hoisting ရဲ့ အကူအညီနဲ့
မကြေညာခင် အပေါ်ဆုံးကနေပီး လှမ်းသုံးလို့ရတယ်။ ဒါပေမဲ့ တန်ဖိုး မထည့်ထားသေးတဲ့တွက်
undefined ပဲရမှာဖြစ်တယ်။
နောက်တခုက တန််ဖိုးကိုထပ်တလဲလဲ ပြန်ပီး keywordသုံးပီး ပြန်ကြေညာလို့ရတယ်။

let နဲ့ constက ကြတော့ block scope ဖြစ်တယ် ပြောချင်တာက block {}ကြားမှာပဲသုံးနိုင်တယ်။
block scope တန်ဖိုးတွေက same block scopeမှာ ပြန်ပီး ကြေညာလို့မရဘူးဖြစ်တယ်။
အဲ့မှာမှ let နဲ့ const က ဘာကွာလဲဆိုတော့ let နဲ့ကြေညာထားတဲ့ တန်ဖိုးက 
ထပ်ပီး assign valueလုပ်လို့ရတယ် ဒါပေမဲ့ constနဲ့ ကြောညာထားတဲ့တန်ဖိုးက ပြောင်းလို့မရဘူး
const ကို PIလိုတန်ဖိုးမျိုးကြေညာတဲ့ချိန်မှာသုံးတယ်။
 
နောက်တခုက scope resolution
သူက ဘာလဲဆိုရင် ဘယ် variable ရဲ့တန်ဖိုးကို ပြန်ပေးရမလဲဆိုပီးကြည့်တာမျိုးဖြစ်တယ်
ဥပမာနေနဲ့ဆို scope တခုတွင်းမှာ တူညီတဲ့ variable nameနဲ့ 2ခုကြေညာထားတယ် 
ဒါဆို scope တခုချင်းဆီမှာ တန်ဖိုးက ဘယ်လိုယူသွားပီး ဘယ်ကောင်ကိုကြည့်မှာလဲဆိုတာမျိုးဖြစ်တယ်။
function hello()
        { 
            var data;
            console.log('Data ',data);
            let c = 10;

            var data = 30;
            console.log('Hello');   
            {
                let a = 20;
                const k = 100;
                console.log('A ',a);
                console.log('k ',k);
                //console.log('C is ',c);

                let c = 300;
                console.log('C is ',c);
                console.log("Data is ",data);
                
            }
            //let c = 300;
            console.log('C is ',c);
            //console.log('A ',a);
            //console.log('k ',k);
            data = "Something";
        }
hello();

ဒီဥပမာမှာဆို ပထမ block ထဲမှာ ထုတ်ထားတဲ့ cတန်ဖိုးက 300
ရပီး block ပြင်က တန်ဖိုးက 10ရမှာပဲဖြစတယ် ဘာကြောင့်လဲဆိုရင် scope resolution ကြောင့်ပဲဖြစ်တယ်

နောက်တခုက မကြေညာပဲသုံးတဲ့ တန်ဖိုးတွေဆိုရင် global scope or window object မှာ၀င်သွားတယ်။
နောက်တခုက function အပြင်က varနဲ့ကြေညာထားတဲ့တန်ဖိုးတွေက global scope
မှာ တန်ဖိုး၀င်သွားတယ်။

function hello()
{ 
    var data;
    console.log('Data ',data);
    let c = 10;

    var data = 30;
    console.log('Another ',another);

    second = 300;
}
var another  = 400;
console.log('Second ',window.second);
hello();
//console.log("C ",c );
console.log('Second ',second);

နောက်တခုက var ကိုမှားသုံးမိရင် ပြဿနာရှိနိုင်တယ် ဥပမာနေနဲ့ဆို 
var top = 300;
console.log(top == 300); 
အထက်က တန်ဖုိးဆိုရင် false ပြန်ရမယ် ဘာလို့လဲဆိုရင် 
window object မှာ topတန်ဖိုးက ပါပီသားဖြစ်ပီး readonly တန်ဖိုးဖြစ်တဲ့တွက်ကြောင့် 
ပြန်ပီး redeclare မရလို့ပဲဖြစ်တယ်
အဲ့တန်ဖုိးကို let or const နဲ့ ကြေညာမယ်ဆို 
Uncaught SyntaxError: Identifier 'top' has already been declared
ဆိုတဲ့ တန်ဖိုးရမယ်။ ဒါကြောင့်မို့ var အစား const or let ကိုသုံးသင့်တယ်။

Destructuring Assignment
ပြောချင်တာက = sign ရဲ့ ညာဘက်မှာရှိတဲ့တန်ဖိုးတွေကို ဘယ်ဘက်က vaiableထဲမှာ 
ဖြန့်ပီးထည့်လိုက်တာမျိုးကို ပြောချင်တာဖြစ်တယ်။
ဥပမာနေနဲ့ တန်ဖိုး၂ခုပါတဲ့ array ထဲက တန်ဖိုးကို vaiable 2လုံးထဲထည့်ချင်တယ်ဆို ပုံမှန်တိုင်းနေနဲ့
အောက်ကလိုမျိုး သုံးနိုင်တယ်။
let arr = [1,2];
let a = arr[0];
let b = arr[1];

အဲ့တာကို Destructuring statment နေနဲံသုံးမယ်ဆို အောက်ပါတိုင်း သုံးနိုင်တယ်။
let [a, b] = arr;
ဒီကောင်ကိုကြတော့ ဘာလို့ အတိကျခေါ်လဲဆို Array Destructuringလို့ ခေါ်တယ်။

နောက်တခုနေနဲ့ဆို အောက်က example ကိုထပ်ကြည့်မယ်။
let arr = [1,2, 3, 4, 5];
let [a, b, ...c] = arr;
ဒီမှာဆို a = 1, b = 2, c = [3,4,5] ဆိုတဲ့တန်ဖိုးအသီးသီး၀င်သွားမှာပဲဖြစ်တယ်
ပြောချင်တာက ...ဆိုတာက ကျန်တဲ့နောက်ကတန်ဖိုးတွေဆိုပီးပြောတာဖြစ်တယ်
တကယ်လို့ အဲံကောင်ကို အရှေ့ဆုံးကထားမယ်ဆုိရင်တော့ errorတက်လိမ့်မယ်။
ဘာလို့ဆိုတော့ Rest elementက နောက်ဆုံးမှာပဲ ထားရမှာဖြစ်လို့ဖြစ်တယ်။

နောက်တခုက အဲ့နေရာမှာ 2ဆိုတဲ့တနဖိုးကိုကျော်ပီး bထဲကို 3ထည့်ချင်ရင် comma နဲ့ position
ကျော်ပီးထည့်နိုင်တယ်။ အောက်ကလိုမျိုးဖြစ်တယ်။
let [a, , b, ...c] = arr;

နောက်တခုကကျတော့ object Destructuring
သူကလဲ array Destructuringနဲ့ပုံစံတူဖြစ်တယ်။ object ထဲက တန်ဖိုးကို vaiable 
ထဲ ထည့်သုံးချင်ရင်သုံးနုိင်တယ်။ အောက်ကဥပမာကိုကြည့်ပါ။

let obj = {
    name : "TK",
    age : 38
};

let name = obj.name;
let age = obj.age;

အဲ့မှာ သတိထားရမှာတခုက obj properties နဲ့ vaiable nameနဲ့တူဖို့လိုတယ်
ဟုတ်ပီ အဲ့မှာ vaiable nameကိုပြောင်းပေးချင်တယ် ဘယ်လုိလုပ်လို့ရမလဲပါ့ေ
အဲ့တာဆိုအောက်ကလို မျုိးရေးလို့ရတယ်။
let {age,name:myName} = obj;

object Destructuringမှာ vaiable name ပြောင်းပီးပေးချင်ရင် 
original properties name : new varaible name
ဆိုပီးပေးနိုင်တယ်။

