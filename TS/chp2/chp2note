custom data type သတ်မှတ်မယ်ဆို type ဆိုတဲ့ keyword သုံးပီး 
Type nameကို initial capital letter နဲ့ရေးရမယ်
နောက်တနည်းနေနဲ့ဆို interfaceကိုသုံးပီး ကြေညာနိုင်တယ်
eg. type Custom = {name : string};
    interface Point { x: number, y : number}

    * interface vs type နဲ့ကြေညာတဲ့ custom typeရဲ့ကွာခြားချက်က 
      interface နဲ့ကြေညာတဲ့ကောင်တွေက extendsလုပ်ပီး type mergeလုပ်သုံးနိုင်တယ်
      type နဲ့ကြေညာတဲ့ကောင်တွေမှာ မရဘူး

    * typeမှာ extendsလုပ်ပီးသုံးချင်ရင် & နဲ့mergeပီးသုံးလို့ရတယ်

    * နောက်ကွာခြားချက်တခုက interface မှာနောက်ထပ် တခေါက်ထပ်ကြေညာရင် 
      fieldကို ထပ်ထည့်သလိုလုပ်ပေမဲ့ typeမှာကျတော့ error တက်တယ် 
      (reference to addingExisitingType.ts)

union type - ဆိုတာ type constraint ပေးလိုက်တာမျိုးပဲ
             ဘယ်ကောင်ပဲ ဒီ typeမှာ ြဖစ်ရမယ် ဆိုတာ သတ်မှတ်လိုက်တာမျိုးပဲ

literal union type - ဆိုတာက union typeကိုမှ custom typeနဲ့ သတ်မှတ်တာမျိုးကိုခေါ်တယ်
                     eg. type literal = 'start' | 'pending' | 'end';

unknown type - မှာ ဆိုရင် obj ဖြစ်ရင်တောင် သူ့ရဲ့ properties, methodsတွေကို လှမ်းခေါ်သုံးခွင့်မပေးဘူး
               သူကိုယ်တိုင်ကိုပဲ သုံးခွင့် အခြားကောင်တွေကို parameter passလုပ်ခွင့်ပဲပေးတယ်
               third parties နေနဲ့ exportလုပ်လိုက်ချင်တယ် ဒါပေမဲ့ သူမှာတိုက်ရိုက် လာမသုံးစေချင်တာမျိုးမှာ သုံးတယ်
               check in unknown.ts

never type - method မှာ exception ကြောင့် returnကို မရောက်နိုင်တော့တဲ့ ကောင်မျိုးကိုပြောတာ

typle type - array lateral နေနဲ့ ကြေညာပီး ပြန်သုံးချင်ရင် array လို indexနဲ့ ပြန်ခေါ်သုံးတယ် 
             ဘယ်လိုနေရာတွေမှာသုံးလဲဆို Data object တွေမဆောက်ပဲ DTOလိုမျိုး တိုက်ရိုက်ပြန်ချင်သုံး