
Prgoramming language တွေကိုခွဲတဲ့အခါမှာ type systemပေါ်မူတည်ပီးခွဲလို့ရတယ်။
Static Type နဲ့ Dynamic Type ဆိုပီးနှစ်မျိုးရှိတယ်။

အဲ့ကျတော့ Static Type ဆိုတာဘာလဲပေါ့
အလွယ်မြင်သာအောင်ပြောရမယ်ဆို တန်ဖိုးတခုကို သတ်မှတ်ပီးသွားရင် ပြန်လည်ပြောင်းလို့
မရတာမျိုးကိုဆိုလိုတာဖြစ်တယ်။
ဥပမာ မြင်သာအောင်ပြောရမယ်ဆို ထမင်းပေါင်းအိုးပေါ့ ထမင်းချက်ဖို့အတွက်ပဲ ကျန်တဲ့
ဟင်းချက်တာတွေ ရေနွေးတယ်တာတွေ ပြောင်းလုပ်လို့မရဘူး အဲ့လိုမျိုးကိုဆိုလိုတာဖြစ်တယ်။
ထမင်းအိုးလို့ သတ်မှတ်ထားတဲ့တွက် ထမင်းပဲချက်လို့ရမယ် ကျန်တာ ပြောင်းလုပ်လို့မရဘူး။

နောက်တခုကကျတော့ Dynamic Type။
သူကကျတော့ ခုဏက static Typeနဲ့ပြောင်းပြန် တန်ဖိုးတွေကို ပြောင်းလဲလို့ရတာမျိုးကိုဆိုလိုတယ်။
မြင်သာအောင်ဥပမာပေးရမယ်ဆို ခွက်အလွတ်တလုံးနဲ့တူတယ်။
ရေထည့်ထားမယ်ဆိုရေခွက် အအေးထည့်လိုက်မယ်ဆို အအေးခွက် အဲ့လိုမျိုး 
ထည့်လိုက်တဲ့ အရာ(ဒိမှာကျတော့ ဒေတာပေါ့)ပေါ်မှာ မူတည်ပီးပြောင်းလဲသွားတာမျိုးကို ခေါ်တယ်။

Static Type တွေမှာကျတော့ တန်ဖိုးတွေကို Type ကနေသတ်မှတ်ပီး 
Dynamic Type တွေမှာကျတော့ တန်ဖိုးတွေကို Value တွေကနေသတ်မှတ်တယ်။
ဥပမာ အနေနဲ့ဆိုရင် အောက်က ကောင်ကို ကြည့်ရအောင်
Static Type
int num = 10; // number type

Dynamic Type
let num = 10; // number type
num = true; // boolean type
num = "Hello"; // string type

Static Type နဲ့ Dynamic Type ကြားက ဘာအဓိက ကွာခြားလဲဆိုရင်
Dynamic type တွေမှာက type တွေက အမျိုးမျိုးပြောင်းလဲနေတဲ့တွက်ကြောင့်
Type Error Handling တွေကို ထိမ်းချုပ်ဖို့ခက်တယ်။
ဒါပေမဲ့ static type တွေမှာကျတော့ Type Error handling ကို compile time
မှာထဲက လုပ်ဆောင်နိုင်မှာပဲဖြစ်တယ်။
ဆိုလိုတာက အပေါ်က num = 10 ဆိုတဲ့နေရာမှာ number(ကိန်းဂဏန်းတန်ဖိုး) မဟုတ်တဲ့
အခြားတန်ဖိုး num = "Hello"ဆိုတာမျိုးကိုတာ static Typeမှာထည့်မယ်ဆိုရင်
ထည့်လို့ရမှာ မဟုတ်ဘူး compile time မှာထဲက error ပြမှာဖြစ်တယ်
နောက်တခုနေနဲ့ (num * "Hello")ဆိုတဲ့ number တခုကို အခြား string(စာလုံး အစုအ၀ေး)တွေနဲ့
လုပ်ဆောင်လို့ မရနိုင်တဲ့ လုပ်ဆောင်ချက်မျိုးကိုလဲ လုပ်ဆောင်လို့ရမှာမဟုတ်ဘူးဖြစ်တယ်။

လောလောဆယ်ကတော့ ဒီလောက်ပဲ မှတ်ထားပီးနောက်မှ ထပ်ပီး လေ့လာကြည့်ရအောင်။

What is Prgoramming language
ဒါကိုဖွင့်ဆိုမယ်ဆိုရင် ကွန်ပျူတာနဲ့ လူနဲ့ ဆက်သွယ်ပီး လုပ်ဆောင်ဖို့အတွက် 
ကြားခံ ဆက်သွယ်ရေး ဘာသာစကားလို့ပြောရမယ်။

Program ဆိုတာ လုပ်ငန်းစဥ်တစ်ခုကို စနစ်တကျ ဘာပြီးဘာလုပ်တယ်ဆိုတာမျိုးကို
ဖွဲ့စည်းထားတဲ့ လုပ်ဆောင်ချက်တွေပါ၀င်တဲ့ ကောင်မျိုးကို ဆိုလိုတာဖြစ်တယ်။ 

Programming language ဆိုတာက အဲ့လိုပဲ computer ကို စနစ်တကျ 
ဘာပြီးဘာလုပ်မယ်ဆိုတဲ့ လုပ်ဆောင်ချက်တွေကို လူကနားလည်တဲ့ 
ဘာသာစကားကနေ ကွန်ပျူတာကို ခိုင်းစေနိုင်တဲ့ ဘာသာစကားဖြစ်တယ်။

Computer က ဘယ်လိုမျိုး ဒီ programming language ကို နားလည်လဲပေါ့။
တကယ်က ကွန်ပျူတာက နားလည်တာက 0,1 ဆိုတဲ့ binary ကိုပဲနားလည်တယ်။
အဲ့တော့ ဘယ်လိုလုပ်သွားလဲဆို programming language တခုကနေပီး
ခုဏက manchine နားလည်တဲ့ binary instruction setအနေနဲ့ပြောင်းလဲပီး
လုပ်ဆောင်သွားတယ်။ အဲ့လိုလုပ်ဆောင်တာမျိုးကို ဘာလို့ခေါ်လဲဆိုရင် Compilerလို့ခေါ်တယ်။

Compiler
Compiler ဆိုတာက source code ကိုယူပီး machine code
(computer နားလည်တဲ့ ကုဒ်)နေနဲ့ ပြောင်းပေးတာကို ခေါ်တယ်။ 
တိုက်ရိုက်ပြောင်းပေးတဲ့ programming language တွေက 
C, C++, Goတို့လိုကောင်မျိုးတွေဖြစ်တယ်။

ဘယ်လို languageတွေမှာသုံးလဲဆိုရင် static typed programming language
တွေမှာ သုံးတာများတယ်။

ဘာလို. static typed programming language တွေအတွက် 
compiler ကသင့်တော်သလဲဆိုတော့ runtime မှာ field, တွေ 
method implementation တွေ operator semantic တွေပြောင်းစရာမရှိလိုပါ။ 

Dynamic language တွေလို runtime မှာ changes လိုတဲ့ကောင်တွေဖိုတော့ 
compiler က သိပ်အဆင်မပြေပါဘူး။ ဥပမာ + ဆိုပါစို. ဒါက 
static typed language တွေမှာ compile time မှာကတည်းက 
string concatenation လုပ်ရမှာလား arithmetic addition 
လုပ်ရမှာလားသိပါတယ်။ အဲ့အတွက် + အတွက် machine code, bytecode 
ကိုတခါတည်းထုတ်ထားလို.ရပါတယ်။ 
Dynamic language တွေဖို.ကျတော့ အဲ့လို တခါတည်းထုတ်ထားလို.မရပါဘူး။ 
+ ရဲ. semantics သည် operand type အပေါ်မူတည်ပြီးပြောင်းမှာပါ။ 
Operand type ကလဲ dynamic typed ဖြစ်တဲ့အတွက် runtime မှာ
ပြောင်းမှာပါ အဲ့တော့ + အတွက် dynamic language တွေဖို. 
compiler သုံးထုတ်မယ်ဆိုရင် + ရဲ. operand တွေကိုစစ်၊ 
သူတို.ရဲ. type အပေါ်မူတည်ပြီး ဘာ operation လုပ်ရမယ်ဆိုတာကို 
ထုတ်ရပါလိမ့်မယ်။ အဲ့တော့ အလုပ်ရှုပ်ပါတယ်။ 
ဒါကြောင့် static typed programming language အများစုကို 
compiler သုံးထုတ်ပါတယ်။ 
Dynamic typed programming language တွေကို 
compiler သုံးထုတ်တာရှားပါတယ်။ 

အဲ့တော့ တခါတည်း runtime မစခင်ကတည်းက code တွေကို 
executable အနေနဲ.ပြောင်းလိုက်လို.ရပါတယ်။ 

အဲ့လို တိုက်ရိုက်ပြောင်းပေးတာ ဘာကောင်းလဲဆိုရင် machine direct 
နားလည်တဲ့ကောင်ဖြစ်တဲ့တွက်ကြောင့် process executing time မြန်တယ်။ 
ဒါပေမဲ့ အားနည်းချက်အနေနဲ့ကျ platform dependent ဖြစ်တယ်။ 
အဲ့နေရာမှာ platform ဆိုတာဘာကိုဆိုလိုလဲဆို runနေတဲ့ 
OS(operating system) ပြောချင်တာက window, mac, linux 
တို့လိုကောင်မျိုးနဲ့ လုပ်ဆောင်နေတဲ့ CPUပေါ်မူတည်နေတာကိုပြောတာ။ 
အဲ့တော့ ဘာဖြစ်လဲဆိုရင် window မှာ runထားတဲ့ကောင်ကို Linux မှာ 
runမရဘူး။ အဲ့လိုပဲ linuxမှာ runထားတဲ့ကောင်ကို macမှာ runလို့ မရဘူး။

အဲ့တော့ compiler modelကိုသုံးထားပေမဲ့ platform independent 
မဖြစ်တဲ့ကောင်နေနဲ့ဆိုရင် ဘာရှိလဲဆိုရင် Java, C#တို့လိုကောင်မျိုးရှိတယ်။ 
သူတို့ကကျ ဘယ်လိုလုပ်လဲဆို Javaမှာဆိုရင်ကျ source codeကို ယူပီး 
byte codeထုတ်လိုက်တယ် အဲ့byte codeကိုမှ 
JVM(java virtual machine)နေပီး 
native code(computer နားလည်တဲ့ ကုဒ်)အနေနဲ့ ပြောင်းပေးတာဖြစ်တဲ့တွက် 
platform independent ဖြစ်သွားတယ်။ 
ဒါပေမဲ့ theorically အရ processing timeမှာတော့ C, Goတို့လောက်တော့ 
မြန်မှာ မဟုတ်ဘူး။ 

Java မှာဆို Java compiler ကိုသုံးပီး Byte code ဖိုင်ထုတ်လိုက်တယ်။
bytecodeက intermediate code လို့ပြောရမယ် manchine code ပုံစံပဲ ဒါပေမဲ
manchine မှာတော့ ဒါရိုက်တည့်သွား run လုပ်ဆောင်လို့ရမှာမဟုတ်ဘူးဖြစ်တယ်။
ဥပမာနေနဲ့ဆို hello.java ဖိုင်ကို javac ဆိုတဲ့ command သုံးပီး runလိုက်ရင်
class file ထွက်လာမယ် အဲ့ကောင်ကို byte code လို့ပြောတာဖြစ်တယ်။
အဲ့ byte code instruction ကိုကြည့်ချင်တယ်ဆိုရင်
javap -v helloဆိုပီး လူတွေဖတ်လို့ရတဲ့ ပုံစံနဲ့ ကြည့်လိုရနိုင်တယ်။
ဒါပေမဲ့ တကယ့် အတွင်းပိုင်းမှာကတော့ binary operation တွေပဲဖြစ်တယ်။
ဒါပေမဲ့အဲ့ကောင်ကို manchine ပေါ်မှာ တည့်run လို့ရမှာ မဟုတ်ဘူးဖြစ်တယ်။
သူ့ကို runချင်ရင် JVM(Java virtual manchine)ဆိုတဲ့ ကောင်ရဲ့ အကူညီနဲ့
byte code ရှိတာနဲ့ မတူညီတဲ့ OS JVM မှာ run နိုင်မှာဖြစ်တယ်။
အဲ့တော့လုပ်ဆောင်ချက်က ဘယ်လိုလဲဆိုရင်

hello.java
javac hello.java
hello.class // byte codeဖိုင်ရမယ် အဲ့ကောင်ကိုမှ
JVM(Window, Mac, Linux) ကိုသုံးပီး computer မှာ run နိုင်မှာဖြစ်တယ်။

platform independent ဖြစ်တယ်ဆိုတာ byte codeထုတ်လိုက်တဲ့တွက်ကြောင့်
ကြိုက်တဲ့ platform ပေါ်မှာ အဲ့ bytecodeနဲ့ runနိုင်တာဖြစ်တယ်။


-------------
Chapter 3
strongly type - ဆိုတာက invalid operationတွေကို ပေးမလုပ်ဘူး type error cacheလုပ်နိုင်တယ်
   ဒါပေမဲ့ ဘယ်လောက် stronglyဖြစ်တယ်ဆိုတာ languageပေါ မူတည်တယ် 
   ဥပမာ C++ and java နဲ့မှာဆို java က ပိုပီး stronglyဖြစ်တယ်လို့ပြောလိုရတယ်
   
   အောက်ကဥပမာကိုကြည့်ရအောင်
   Java
   int a = 10;
   a = "Hello" * 10; // Error

   JavaScript
   let a = 10;
   a = "Hello" * 10; // Not Error but Will get invalid value
   ဒီဥပမာမှာဆိုရင် Java မှာဆို a က number ဖြစ်နေတဲ့ အတွက်ကြောင့်
   invalid type operationဖြစ်တဲ့ string တန်ဖိုးနဲ့ မြှောက်တာမျိုးကို လုပ်ဆောင်လို့ရမှာမဟုတ်ဘူးဖြစ်တယ်။
   ဒါပေမဲ့ JavaScriptမှာကျတော့ခွင့်ပြုတယ် ဒါပေမဲ့ တန်ဖိုးကျတော့ 
   မှန်ကန်တဲ့ operationမဟုတ်တဲ့အတွက် invalid value တန်ဖိုးတွေထွက်မှာဖြစ်တယ်။
   အဲ့လိုကောင်မျိုးကို ဆိုလိုတာဖြစ်တယ်။

   အဲ့လို Invalid Operation တွေပေးလုပ်တာမျိုးကိုကျတော့ weakly type လို့ခေါ်တယ်။
   strongly type ဆိုတာက invalid type operation တွေကို program runနေတဲ့ချိန်မှာကော
   မ run ခင်နိုင်မှာကော သိနိုင်ပီး ကာကွယ်နိုင်တာမျိုးကို ခေါ်ဆိုတာဖြစ်တယ်။

Strongly & weakly typeဖြစ်ခြင်းမဖြစ်ခြင်းသည် static or dynamic type
နဲ့မသတ်ဆိုင်ပဲ invalid type operation ကို ခွင့်ပြုချင်းမပြုခြင်းနဲ့တာဆိုင်တယ်။
Dynamic typeဖြစ်ပေမဲ့ Strongly typeဖြစ်တဲ့ language တွေလဲရှိတယ်။
ဥပမာဆိုရင် ruby လိုကောင်မျိုးပေ့ါ။
























































































































































